<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Suica's Blog</title><link>https://suicablog.cobaltkiss.blue/posts/</link><description>Recent content in posts</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 14 May 2022 22:16:12 +0800</lastBuildDate><atom:link href="https://suicablog.cobaltkiss.blue/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>最近在听什么</title><link>https://suicablog.cobaltkiss.blue/posts/what-am-i-listening-to-recently/</link><pubDate>Thu, 12 May 2022 22:09:51 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/what-am-i-listening-to-recently/</guid><description>&lt;div style="max-width: 700px;">&lt;div style="left: 0; width: 100%; height: 140px; position: relative;">&lt;iframe src="https://bandcamp.com/EmbeddedPlayer/album=1557113732/size=large/bgcol=ffffff/linkcol=333333/artwork=small/transparent=true/" style="top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;" allowfullscreen allow="encrypted-media;">&lt;/iframe>&lt;/div>&lt;/div>
&lt;p>音源来自: &lt;a href="https://bandcamp.com">https://bandcamp.com&lt;/a>&lt;/p>
&lt;p>框架制作于: &lt;a href="https://iframely.com/">https://iframely.com/&lt;/a>&lt;/p>
&lt;p>今天发现 &lt;a href="https://iframely.com/">Iframely&lt;/a> 能轻松制作富媒体网页播放器所需的 code（当然，不限于 Bandcamp，更不仅限于音视频播放），一般来说无需注册直接把想要播放的音源 url 丢进去就会自动生成 html 格式的 code，并可以简单编辑一些样式，将生成的 code 嵌入自己网站中对应位置就可以了。注册后似乎可以自己进行一些制作，不过目前还没有尝试，之后研究下依旧发在这里。&lt;/p>
&lt;p>Hugo 博客需要修改下 markup 设置才可直接在 content 中的 markdown 文件里直接嵌入 html 的 code。简单来说，假设您的 config 文件为 toml 格式，那么在里面加入这么几行就可以了：&lt;/p>
&lt;pre tabindex="0">&lt;code>[markup]
[markup.goldmark]
[markup.goldmark.renderer]
unsafe = true
&lt;/code>&lt;/pre>&lt;p>Markup 详细配置可以参考官方文档: &lt;a href="https://gohugo.io/getting-started/configuration-markup">https://gohugo.io/getting-started/configuration-markup&lt;/a>&lt;/p>
&lt;p>想要和我一样放在置顶文章的效果也很简单，在 Front Matter 中加入 &lt;code>weight: 1&lt;/code> 即可。想要放在其他位置，比如侧边栏，可能要在 layouts 对应位置找地方嵌入。&lt;/p>
&lt;p>我很喜欢 Bandcamp 这个音乐平台，用户可以以最直接的方式支持创作者（购买单曲或专辑），并直接在里面购买并下载音乐源文件（一般是 mp3 和 flac 格式），购买前有几次试听全曲的机会（部分专辑可能只能试听一部分）。购买即拥有这点太多音乐流媒体如今做不到，不必为了自己喜欢的音乐一直购买会员，避免音乐因为各种原因下架而无法继续听的风险。缺点的话，收录的音乐大多由独立音乐人创作，像那些热门流行乐这边几乎没有，音源有限，另外就是近年被墙了 OTZ（所以说，为什么）。&lt;/p>
&lt;div style="left: 0; width: 100%; height: 300px; position: relative;">&lt;iframe src="https://bandcamp.23video.com/9891472.ihtml/player.html?token=a18cd8b6e69c44f705d2829684a70e07&amp;source=embed&amp;photo_id=18789603" style="top: 0; left: 0; width: 100%; height: 100%; position: absolute; border: 0;" allowfullscreen allow="encrypted-media;">&lt;/iframe>&lt;/div></description></item><item><title>Funkwhale 手动安装与管理笔记</title><link>https://suicablog.cobaltkiss.blue/posts/funkwhale-installation-and-management/</link><pubDate>Sat, 14 May 2022 22:16:12 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/funkwhale-installation-and-management/</guid><description>&lt;span class="highlight-text purple">2022.05.19 更新: 应该是找到 Server Error (500) 报错原因了。&lt;/span>
&lt;p>（之前的）碎碎念部分：&lt;/p>
&lt;p>其实去年就已经成功安装过 Funkwhale 了，当时我觉得官方 Docker 的教程写的很详细易懂根本没必要再写篇笔记，直到官方更新了版本并通知 &lt;a href="https://blog.funkwhale.audio/deprecation-all-in-one-container.html">删除 all-in-one-container 安装方法 &lt;/a>，我因不熟悉 Docker 操作，在未备份情况下把数据全都整没了，之后就一直摆烂，没再学习用其他方法安装。&lt;/p>
&lt;p>最近想要自己的音乐服务器的心情又在蠢蠢欲动，于是跟着 &lt;a href="https://docs.funkwhale.audio/installation/debian.html">Debian 上手动安装 Funkwhale 的教程&lt;/a>重装 Funkwhale（其实最初是跟着官方现在推荐的 &lt;a href="https://docs.funkwhale.audio/installation/index.html">Quick install&lt;/a> 方法尝试安装，但是脚本跑到最后总会出错，版本似乎也停留在了 1.2.3 ，而且我觉得这个方法更适合什么都没安装的新机子），期间我还尝试用 S3 作为外部储存来存放音频文件并更改 Funkwhale 的 embled 样式，但是似乎每次更改都会让 Funkwhale 处在一个非常不稳定的状态，频繁爆出 Server Error (500) 的问题，之后即便试图还原也无法根除错误。另外 Funkwhale 在操作上也有我始终无法适应的地方，结果一番折腾后最终还是再次把它闲置了。 OTZ&lt;/p>
&lt;p>不过我也认识使用 Funkwhale 蛮久了但根本没像我一样出各种问题的友邻，另外 Funkwhale 目前也有团队在积极维护……总之心想着还是把安装过程记录下，以便未来还有使用 Funkwhale 所提供服务的需求，如果您对 Funkwhale 感兴趣，不妨将本文当作一个参考。&lt;/p>
&lt;h2 id="安装过程注意事项">安装过程注意事项&lt;/h2>
&lt;p>&lt;em>整个过程基本就是按照&lt;a href="https://docs.funkwhale.audio/installation/debian.html">官方教程&lt;/a>来安装，我只把里面几点可能需要注意的地方记录下。&lt;/em>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在创建用户 funkwhale 后与 xxx 前所有操作都用 funkwhale 用户进行，进入这个用户的指令为 &lt;code>sudo -u funkwhale -H bash&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;a href="https://docs.funkwhale.audio/installation/debian.html#download-the-latest-funkwhale-release">Download the latest Funkwhale release&lt;/a> 这部分，您需要将所有 &lt;code>|version|&lt;/code> 替换为您想要安装的版本号，比如 &lt;code>1.2.5&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建虚拟环境 virtualenv 后，&lt;strong>所有涉及到 python 的指令进行前都要先激活 virtualenv&lt;/strong> ，激活指令为 &lt;code>source /srv/funkwhale/virtualenv/bin/activate&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 python dependencies 前，可能需要先升级 pip 版本，否则部分依赖可能安装失败，升级指令 &lt;code>pip install --upgrade pip&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;a href="https://docs.funkwhale.audio/installation/debian.html#environment-file">Environment File&lt;/a> 这部分，您需要编辑 &lt;code>/srv/funkwhale/config/.env&lt;/code> 这个重要文件，根据文件中最上方注释，里面有几个使用手动安装必须进行更改的地方： &lt;code>DJANGO_SECRET_KEY&lt;/code>、&lt;code>FUNKWHALE_HOSTNAME&lt;/code>、&lt;code>DATABASE_URL&lt;/code>、&lt;code>CACHE_URL&lt;/code> 。其中，&lt;code>DJANGO_SECRET_KEY&lt;/code> 在前面步骤生成，复制下来粘贴到这里就可以了，&lt;code>FUNKWHALE_HOSTNAME&lt;/code> 是您想要使用的域名，记得设置 DNS 的 A 记录，后面两个 URL 可以在文件中找到两处 &lt;code>Use the next one if you followed Debian installation guide&lt;/code> 提示，全部将下一行的注释符号删除即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装后如果需要重新编辑 &lt;code>.env&lt;/code> ，编辑后需要重启全部 Funkwhale 进程： &lt;code>sudo systemctl restart funkwhale.target&lt;/code> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行到 &lt;a href="https://docs.funkwhale.audio/installation/debian.html#systemd-unit-file">Systemd unit file&lt;/a> 这部分时，切换到超级用户进行后续操作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="s3-配置困惑">S3 配置困惑&lt;/h2>
&lt;p>详细教程请参考这里： &lt;a href="https://docs.funkwhale.audio/admin/external-storages.html">https://docs.funkwhale.audio/admin/external-storages.html&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>This feature was released in Funkwhale 0.19 and is still considered experimental.&lt;/p>
&lt;/blockquote>
&lt;p>注意，这个 feature 到目前为止依旧不稳定。&lt;/p>
&lt;p>我配置后的确可以收听远程 S3 中存放的音频，但是也是在这期间开始频繁出现 Server Error (500) 错误，并且 Content-Security-Policy 这部分似乎一直有问题。我主要有两个不确定的地方：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>我感觉这个教程应在安装 Funkwhale 期间阅读，但是教程没有说清楚。像是 &lt;code>.env&lt;/code> 和 &lt;code>funkwhale.template&lt;/code> 的编辑分别应插入到 &lt;a href="https://docs.funkwhale.audio/installation/debian.html#environment-file">Environment file&lt;/a> 的 &lt;code>nano /srv/funkwhale/config/.env&lt;/code> 这步和 &lt;a href="https://docs.funkwhale.audio/installation/index.html#nginx">Nginx 配置&lt;/a>的 &lt;code>curl -L -o /etc/nginx/sites-available/funkwhale.template &amp;quot;https://dev.funkwhale.audio/funkwhale/funkwhale/raw/1.2.5/deploy/nginx.template&amp;quot;&lt;/code> 之后。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Content-Security-Policy 要更改几处？config 文件中有这么几行：&lt;/p>
&lt;pre tabindex="0">&lt;code># If you are using S3 to host your files, remember to add your S3 URL to the
# media-src and img-src headers (e.g. img-src 'self' https://&amp;lt;your-S3-URL&amp;gt; data:)
add_header Content-Security-Policy &amp;quot;default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; object-src 'none'; media-src 'self' data:; worker-src 'self'&amp;quot;;
add_header Referrer-Policy &amp;quot;strict-origin-when-cross-origin&amp;quot;;
add_header X-Frame-Options &amp;quot;SAMEORIGIN&amp;quot; always;
&lt;/code>&lt;/pre>&lt;p>``&lt;/p>
&lt;p>显然，这部分中的 &lt;code>img-src 'self' data:;&lt;/code> 与 &lt;code>media-src 'self' data:;&lt;/code> 都应按照教程进行修改，但我修改后发现浏览器依旧出现 Content Security Policy 相关报错。再看 config 文件，&lt;code>location /front/&lt;/code> 与 &lt;code>location /front/embed.html&lt;/code> 中也有 &lt;code>img-src 'self' data:;&lt;/code> 与 &lt;code>media-src 'self' data:;&lt;/code> ，是否需要一并更改？&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>之后我试图把 S3 配置换回到本地，但是更换并未成功，结果还是删掉 Funkwhale 重新安装了。（所幸&lt;a href="https://docs.funkwhale.audio/admin/uninstall.html">卸载 Funkwhale&lt;/a> 过程也并不复杂）&lt;/p>
&lt;h2 id="embed-配置">Embed 配置&lt;/h2>
&lt;p>Funkwhale 支持 embed 网页播放器，有两个前置条件：&lt;/p>
&lt;ol>
&lt;li>Manage - Settings - Security 处 API Requires authentication 开关关闭&lt;/li>
&lt;li>Playlist（或 Artist）以及其包括的曲目所在 library 是可见性均为 Everyone, across all instances&lt;/li>
&lt;/ol>
&lt;p>设置好后，Playlists 中就会出现 &lt;code>&amp;lt;/&amp;gt; Embed&lt;/code> 选项，点击后没有跳出不可使用的提示的话，将 Embed code 复制到想要安置 Funkwhale 播放器的页面即可使用。&lt;/p>
&lt;h2 id="实例管理界面">实例管理界面&lt;/h2>
&lt;p>Funkwhale 使用 Django 界面进行实例管理，管理地址为 &lt;code>https://yourdomain/api/admin&lt;/code> 。&lt;/p>
&lt;p>当您向某个 library 上传音频后，若想彻底删除，仅从 Content - Libraries - Tracks 中执行删除指令是不够的，还需要在 Django 界面分别从 Track、Album、Artist 中删除对应属性。&lt;/p>
&lt;p>参考文档： &lt;a href="https://docs.funkwhale.audio/admin/django.html?highlight=django">https://docs.funkwhale.audio/admin/django.html?highlight=django&lt;/a>&lt;/p>
&lt;h2 id="上传音频">上传音频&lt;/h2>
&lt;p>创建 Library 后就可以直接通过网页前端上传计算机上的音频了，上传前要注意保证音频拥有至少三个属性值： Title（标题）、Artist（艺术家）、Album（唱片集），一般最好还要加上专辑封面，否则 Funkwhale 显示的曲目会缺少图像（封面属于音频的一个属性，不是单独的图像文件）。&lt;/p>
&lt;p>官方推荐的辅助程序为 &lt;a href="https://picard.musicbrainz.org/">MusicBrainz Picard&lt;/a>，下载安装后将缺少属性值或属性值需要更新的音频文件拖入程序中扫描并保存即可完成属性值更新，但是有些曲库中未包含的曲目可能需要手动更改属性值，这里再推荐另一个 Windows 系统可用的程序 &lt;a href="https://www.mp3tag.de/">mp3tag&lt;/a> ，安装后拖入音频文件修改想要更换的属性值即可。&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://docs.funkwhale.audio/users/upload.html">Uploading Content To Funkwhale&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.funkwhale.audio/users/tagging.html">Tagging Music With MusicBrainz Picard&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>《十三機兵防衛圏》游玩体验</title><link>https://suicablog.cobaltkiss.blue/posts/13-eentinels/</link><pubDate>Mon, 09 May 2022 13:40:13 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/13-eentinels/</guid><description>&lt;p>原发售于 PS 平台的《十三機兵防衛圏》最近登陆 NS 平台，通关后来说说游玩感想。&lt;/p>
&lt;p>请注意本文分为无剧透和有剧透的部分，这个游戏一旦被透露剧情便会在游玩过程中失去大量乐趣，未通关本作请不要看有剧透的部分。&lt;/p>
&lt;h2 id="无剧透介绍部分">无剧透介绍部分&lt;/h2>
&lt;p>断断续续用了大概一周时间通关了本作。游戏正如其名有十三位主要角色（最初有十五位），这些角色都拥有自己的「机兵」，并操作「机兵」防卫城市与「终端」……这么说其实只提到了游戏「崩坏篇」的内容，这一部分操作类似于塔防游戏。游戏另外两部分为「追忆篇」和「究明篇」。在「追忆篇」中，玩家根据自己选择的顺序通过简单交互来一点点完成十三个人物的剧情，从不同角色的视角来逐步拼凑游戏的世界观与真相，看过《永恒之酒》和《无头骑士异闻录》的朋友对这种乱叙方式应该不会感到陌生。「究明篇」则将「追忆篇」被打乱的叙事以正序方式进行梳理，并整合了游戏中零散的、随游玩不断更新的线索，可用于整理与回顾剧情。&lt;/p>
&lt;p>十三位主角都是高中生年纪，高中生操控机甲拯救世界的表面设定怎么看都中二感十足。我对香草社了解有限，但依旧能看出游戏中穿插了大量创作者的「个人」趣味的东西，什么裸体开机兵啦，什么 E.T. 和哥斯拉啦，还有少女漫画的桥段、电波感十足的日常甚至魔法少女啦……可以说是要素满满，即便是那细腻的水彩 2D 风格画风也盖不住它浓厚的二次元味。但游戏厉害就厉害在它堆叠了如此多的要素却不令人感到刻意突兀。随着剧情展开，这些要素大部分都能得到合理的解释，而十三个彼此独立又互相交融在一起的故事看到最后不仅没有明显矛盾的地方，还能在游玩过程（甚至游戏剧情末期）不断给玩家带来「欸，怎会如此」的新鲜感。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/hugerobotandagirl_xh4su8.jpg" title="少女与机兵" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/hugerobotandagirl_xh4su8.jpg" alt="少女与机兵">
&lt;/a>
&lt;span class="caption">少女与机兵&lt;/span>
&lt;/div>
&lt;p>虽然这是一个以剧情为主的游戏，但是我认为云游玩的过程一定远不如按照自己的节奏玩上一遍来得有意思，虽说游戏应是被划分到文字冒险类别的，但游戏中角色与环境和其他人物的交互设计、每位玩家不同的游玩顺序选择、塔防的战时紧凑感、亲自一点点揭开真相的快感都让游戏有别于单纯的视觉小说，充分利用了游戏这一载体让玩家沉浸其中。另外，尽管游戏文本量较大，但文笔与动画演出却极为精炼。看似漫不经心的动作与字句实则都有可能是伏笔，每当被一个新的「事实」冲击到再想起之前常常会有恍然大悟的体会，细腻的日常与逐渐脱离日常的真实完美融合于一体。&lt;/p>
&lt;p>当然，尽管游戏让玩家体验剧情时有了一定自由度，但「追忆篇」角色之间、「追忆篇」与「崩坏篇」之间依旧存在一定锁定机制。游戏起始章节玩家必须选择特定角色并穿插进行「追忆篇」与「崩坏篇」，再之后则时不时要面临「必须先解锁另一角色剧情到一定程度才能看继续其他角色的剧情」「必须解锁崩坏篇进度才能继续看追忆篇剧情」等情况，最终玩家需要完成十三个角色全部「追忆篇」剧情与「崩坏篇」三大章节战斗才能看到最终结局。「追忆篇」中玩家操控角色进行交互的过程尽管让游戏相对「点击阅读文字观看画面」体验感丰富了一些，但游戏一周目唯一结局的设定让所有的交互最终都会导向同一结点，即「不管怎么选，最终结果都一样」，游戏比起解密更像是在拼拼图，这不是它的缺点，而是它的特色，像我这样不喜欢多周目游玩、选错选项看到负面反馈并被数值束缚的玩家非常喜欢这种设计。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077604/post/jk_wvktmy.jpg" title="「追忆篇」人物选择 - 由贵" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077604/post/jk_wvktmy.jpg" alt="「追忆篇」人物选择 - 由贵">
&lt;/a>
&lt;span class="caption">「追忆篇」人物选择 - 由贵&lt;/span>
&lt;/div>
&lt;p>对于「崩坏篇」，有的玩家说它明显是在省经费，有的说它意外的带感有趣，我的感受最初和后者相似，觉得它挺有宣泄感的（使用了 normal 难度），但到了游戏后期，比起战斗我更想赶紧看到结局时，我就想赶快跳过战斗了，不过这一部分依旧有几个章节让我印象深刻。&lt;/p>
&lt;p>玩过游戏后我心想，用一个好方式将一个好故事才是终极安利手段，让好奇围观的玩家陷于自己编制的故事中并慢慢接受甚至喜欢上自己喜爱的东西简直不要更有成就感！如果说《十三机兵》的故事按照正常顺序来讲我会给 6 分的话，配合游戏的特有体验与极为优秀的叙事，我可以给打上 9 分（扣 1 分扣在结尾狗粮塞得太多，对，玩这游戏不嗑 CP 会少一半乐趣，&lt;del>我说它的本质就是嗑 CP 也不为过&lt;/del>）。至于各路游戏评测说它小众我觉得其实不用过多理会，之所以「小众」，只是因为游戏的高质量和优秀口碑让它出了圈。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077606/post/highroof_ssqcna.jpg" title="最爱的黄昏都市景色" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077606/post/highroof_ssqcna.jpg" alt="最爱的黄昏都市景色">
&lt;/a>
&lt;span class="caption">最爱的黄昏都市景色&lt;/span>
&lt;/div>
&lt;p>我手上并没有 NS 外的主机，《十三机兵》是今年移植到 NS 平台的游戏，但是玩起来却有种它就是为 NS 打造的游戏的错觉。随时可以拿起 Switch 继续游玩十分便捷，即便有的玩家说最好一口气打完否则太久不玩会忘记前面剧情，我还是觉得一口气体验完有点太累，不如时不时拿起掌机玩一小会儿来得轻松，每一章节最初都可以通过关键词回忆前面解锁的线索，配合「究明篇」很快就可以串起剧情。剧情尽管略显复杂但并不让人感到繁重压抑，无论是认真一口气打完还是当作休闲游戏慢慢来都能得到很棒的体验。字体大小合适不累眼，游戏色调与音乐让人感到舒适，除「崩坏篇」最终一战那一关外游戏帧数稳定，运行流畅……总之并不需要担心移植可能出现的问题，除原有的日语全配音外，NS 版还新增了英语全配音，但要注意中文字幕版本必须从港区购买。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077607/post/bjbute_eitmdj.jpg" title="BJ 真的好可爱！" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077607/post/bjbute_eitmdj.jpg" alt="BJ 真的好可爱！">
&lt;/a>
&lt;span class="caption">BJ 真的好可爱！&lt;/span>
&lt;/div>
&lt;h2 id="含剧透感想部分吐嘈">含剧透感想部分（吐嘈）&lt;/h2>
&lt;p>……&lt;/p>
&lt;p>……&lt;/p>
&lt;p>……&lt;/p>
&lt;p>……&lt;/p>
&lt;p>……&lt;/p>
&lt;p>……&lt;/p>
&lt;p>世上有另一个我，那个「我」与我有着完全一致的基因，因此有着完全一致的样貌和声音，但是我们在不同的环境成长，有着不同的人生经历，于是我们有了区分，爱上了不同的人，迎接着不一样的命运的结局。人类的传宗接代不仅仅依赖于基因的传递，更深受于文化的影响。在基因可以被完全复刻、记忆能够被随意移植的时代，人类迎来了灭亡，却又在数千万年后迎来了新生，而AI 程序与生物层面的人类之间的界限也变得愈加模糊，甚至在这个世界（游戏）中失去了分别。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/misleadingcouple_uilitv.jpg" title="游戏封面让多少人一上来就吃错了 CP" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/misleadingcouple_uilitv.jpg" alt="游戏封面让多少人一上来就吃错了 CP">
&lt;/a>
&lt;span class="caption">游戏封面让多少人一上来就吃错了 CP&lt;/span>
&lt;/div>
&lt;p>……&lt;/p>
&lt;p>当游戏主线进行到出现类似《黑客帝国》的设定阶段时其实自己已经对主线梳理的比较清晰了，于是了解到这一事实后既觉得有些老套，又觉得合情合理。&lt;/p>
&lt;p>在这之前我是个休闲玩家，笑呵呵地看冬坂五百里和关之原瑛之间套路式却就是看不腻的少女漫画情节，咬牙切齿羡慕现充宅网口愁 80 年代拥有有风景看有大屏幕游戏玩有上床下桌的单人卧室甚至追到了我超喜欢的不良 JK 由贵姐，跟着做事冷静靠谱感情上青涩认真的三浦庆太郎少年站在顶楼遥望日本泡沫经济时代下的繁荣黄昏景色，在无限循环列车站随着飞机头少年绪方稔二不断穿梭于站台和车厢之中，流着口水看兔美五百里美和子三人组手上五花八门的小吃，盯着南奈津奈包包里 BJ 大呼可爱并和她一起躲在厕所隔间瑟瑟发抖，看着药师寺恵和东云谅子的剧情连连摇头叹息「少女们你们不要为情这样折磨自己」，和鞍部十郎一起被尾巴君折腾记忆，听乡登学长用他那个小本本整理下的推理，跟比治山隆俊一起追着猫咪尾巴捡硬币赞美炒面面包喝空罐装饮料零售机……&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077608/post/luxuryrom_lbzyej.jpg" title="我羡慕死你了，网口愁" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077608/post/luxuryrom_lbzyej.jpg" alt="我羡慕死你了，网口愁">
&lt;/a>
&lt;span class="caption">我羡慕死你了，网口愁&lt;/span>
&lt;/div>
&lt;p>这期间有几次被惊吓到，一次是开启三浦剧情时被忽然变成熟的面庞与疑似未来的情节与错乱的关系弄到一头雾水，一次是在鞍部十郎的「梦境」中确信五百里和森村老师之间存在某种联系（而之前只是隐约觉得她们发型发色相似），一次是「鞍部十郎」「梦境」中对「五百里」的告白讓我感覺「贵圈真乱」……在这之后，随着手上线索越来越多与前期自己的一些观察，其他的剧情突破更多是成为了我拼凑这个世界真相的最后几块碎片，只为求得一个合理、幸福的结局。&lt;/p>
&lt;p>（不过，最终结局鞍部十郎和药师寺惠亚当夏娃般的会面没有带给我太多震撼，更多是想要吐槽「啊你们真的就这么坦诚相见了」的冲动。我的感动停留在 2188 年的鞍部玉绪对这些少年们的寄语部分。再到后面后日谈想要吐槽的地方更多了 OTZ……）&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077608/post/shocking_scene_ttyjdl.jpg" title="看到这里真的好混乱" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077608/post/shocking_scene_ttyjdl.jpg" alt="看到这里真的好混乱">
&lt;/a>
&lt;span class="caption">看到这里真的好混乱&lt;/span>
&lt;/div>
&lt;p>我最喜欢三浦那条线路。另外起初看他那身打扮分明那么有历史感，刚进入线路却又明显是未来风格，这是我在游戏中体会到的头一轮冲击。大多时候他线路的开场都是非常美丽的黄昏的楼顶，配合安静悠扬的背景音乐让人很舒服，他的性格我也很喜欢，另一世界线中化身的 BJ 形象也很可爱可靠，与之交错在一起的南的线路还有这对 cp 我也非常喜欢。由贵的线路也和南交错在一起，她不论是作为「追忆篇」中刚放出狠话转生对南温柔微笑的外刚内柔不良 JK，还是「崩坏篇」操作轻量级的第 4 世代机兵却有强劲表现的攻速双 A 手，都令人好心动！冬坂（森村）作为一个重量级别关键人物，她自己的线路却几乎是纯粹的少女漫画风，开场叼着面包冲向校门撞到帅哥的桥段过于经典，但是情节老套不代表不好看，我还是蛮喜欢不顾一切表白的少女与外表冷酷的少年这种 CP 的，即便被拒绝也要勇敢表达爱意不留下遗憾的女孩子无论在哪里都是闪闪发光的！&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/loveatfirstsight_r5xrun.jpg" title="老套但好看的少女漫" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/loveatfirstsight_r5xrun.jpg" alt="老套但好看的少女漫">
&lt;/a>
&lt;span class="caption">老套但好看的少女漫&lt;/span>
&lt;/div>
&lt;p>「崩坏篇」第二区域最终战因幡深雪的歌声让连续战斗的疲倦得到了疏解，虽说也是一个梗但是用在这里却十分合适。最终战的卡帧并不让人意外，以第 3 世代机兵的广域范围武器为主制造出的攻击特效与源源不断看不到尽头的敌兵队伍形成在绝境中追寻一线生机的最终战氛围，即便在这之前因为急于通关看结局的急迫感到不耐，因为本以为第三区域结束就可以迎来结局结果又来一个区域（还以为我又要打上十关）而顿时有点绝望，但会想起那时的心情可以说是和主角们几乎同步了，非常佩服制作组能够用这样并不华丽的游戏布局与画面营造出恰到好处的紧张氛围。&lt;/p>
&lt;p>剧情解锁到了解人类几乎灭绝、幸存者不断死亡重生轮回的状况可以说是 2188 年的沖野漫不经心的设计导致的漏洞（如果我没理解错的话后来也因此挽回了「游戏」局面）、森村的被利用、东云的绝望导致的，有种「前面那么宏大的开局突然变得狭小了，好随意的剧情」的感觉。后日谈大家披着高中生虚拟外形实则已经做了妻子丈夫甚至生了孩子（我知道这帮人有传承血脉的使命在）那段，理解状况后略微有些对这哗啦啦喷洒的狗粮感到不适，稍微有点庆幸关之原没出场。虽说这些都是很个人的吐槽，或许很多玩家不介意，像外星人、机甲少女、哥斯拉那些都不过是借用概念外皮，接受也好不接受也罢，对剧情本身影响其实不大，但我会想如果包括后日谈在内的剧情再多一些哲理层面对人类命运的思考和梳理，而不仅仅将灾祸的原因置于私欲上，或是对私欲有更深层次的描写，或许会更好一些？&lt;/p>
&lt;p>对剧情和结局吐槽归吐槽，它们不影响我 90% 游玩过程中的绝妙体验，想夸的在第一部分已经说了不少，相信每个人玩这个游戏的过程和结束后都会有不同的体会感受。窃认为如果游戏去除精妙叙事与其他外包装后捋顺的主线剧情若能更「深度」一些，《十三机兵防卫圈》在被推广时应该会少一些所谓「小众」「二次元」的标签（高中生拯救世界等设定正如前面所言并不是游戏剧情给我「局限」感的关键），也会谜底揭开、游戏结束之时除了酣畅淋漓感外在心底多留一份重量和沉思。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/ending_klzdn4.jpg" title="结局" data-fancybox="13sentinels">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652077605/post/ending_klzdn4.jpg" alt="结局">
&lt;/a>
&lt;span class="caption">结局&lt;/span>
&lt;/div>
&lt;p>（游戏官网： &lt;a href="https://atlus.com/13sentinels/lang/en/">https://atlus.com/13sentinels/lang/en/&lt;/a> ）&lt;/p></description></item><item><title>让 Pleroma 支持中文搜索（pg_cjk_parser 拓展）</title><link>https://suicablog.cobaltkiss.blue/posts/enable-text-search-for-chinese-for-pleroma/</link><pubDate>Mon, 02 May 2022 01:20:14 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/enable-text-search-for-chinese-for-pleroma/</guid><description>&lt;p>&lt;em>大概率之后会继续补充内容。&lt;/em>&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;em>特别感谢 debula、light、shykana 近期与之前的帮助！&lt;/em>&lt;/p>
&lt;p>Pleroma 官方文档 &lt;a href="https://docs-develop.pleroma.social/backend/configuration/howto_search_cjk/">How to enable text search for Chinese, Japanese and Korean&lt;/a> 中对过程进行了简要说明，并提供了多个拓展可供选择，这里以 &lt;a href="https://github.com/huangjimmy/pg_cjk_parser">pg_cjk_parse&lt;/a>为例，因为我个人曾在安装这个拓展的实例尝试搜索，感觉效果不错（但它不支持单字符搜索），除支持简体中文外，该拓展还支持繁体中文、日文和韩文。&lt;/p>
&lt;p>之前在 debula 指导下也曾试着安装 pg_jieba 拓展包，从结果上看搜索的确支持了中文，但不知是 jieba 本身的原因，还是我在安装期间不自觉操作出现了失误，搜索结果并不理想，数量少且结果都是很久之前的，且分词不支持繁中。拖了很久后，终于这次又在 debula 指导下重新尝试启用 pg_cjk_parser 拓展。&lt;/p>
&lt;p>Pleroma 可以搜索到 public 与 unlisted 两种状态的 status，无法搜索到 followers-only 状态的 status（不像 Mastodon 能够搜索到互动过的 followers-only 嘟文），不过用于快速查找一些之前时间线上偶然看到的、现在却找不到的 status，以及自己过去的某些 status，我觉得已经足够了。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>本文指令未特别提示的情况下全部使用 sudo 用户进行。&lt;/p>
&lt;ol>
&lt;li>安装依赖&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo apt-get install -y postgresql-server-dev-all
sudo apt-get install -y gcc
sudo apt-get install -y icu-devtools libicu-dev
&lt;/code>&lt;/pre>&lt;p>使用 Debian 与 Ubuntu 外的系统请自行更换指令。&lt;/p>
&lt;ol start="2">
&lt;li>下载拓展包&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo git clone https://github.com/huangjimmy/pg_cjk_parser.git
&lt;/code>&lt;/pre>&lt;p>假设目前操作的用户为 user ，拓展包目录为 /home/user/pg_cjk_parser ，进入这个目录&lt;/p>
&lt;pre tabindex="0">&lt;code>cd /home/user/pg_cjk_parser
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>安装拓展&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo make clean &amp;amp;&amp;amp; make install
&lt;/code>&lt;/pre>&lt;p>(抱歉之前这里忘记加上 sudo 了！)&lt;/p>
&lt;ol start="4">
&lt;li>以 postgres 用户身份访问终端 psql&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo -u postgres psql
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>连接 pleroma 数据库&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>\c pleroma;
&lt;/code>&lt;/pre>&lt;ol start="6">
&lt;li>创建拓展 pg_cjk_parser&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>CREATE EXTENSION pg_cjk_parser;
&lt;/code>&lt;/pre>&lt;ol start="7">
&lt;li>配置搜索并设置为默认&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>CREATE TEXT SEARCH PARSER public.pg_cjk_parser (
START = prsd2_cjk_start,
GETTOKEN = prsd2_cjk_nexttoken,
END = prsd2_cjk_end,
LEXTYPES = prsd2_cjk_lextype,
HEADLINE = prsd2_cjk_headline);
CREATE TEXT SEARCH CONFIGURATION public.config_2_gram_cjk (
PARSER = pg_cjk_parser
);
SET default_text_search_config = 'public.config_2_gram_cjk';
&lt;/code>&lt;/pre>&lt;ol start="8">
&lt;li>测试效果&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>SELECT alias, description, token FROM
ts_debug('Doraemnon Nobita「ドラえもん のび太の牧場物語」多拉A梦 野比大雄χΨψΩω https://www.doraemon.com/welcome.html');
&lt;/code>&lt;/pre>&lt;ol start="9">
&lt;li>设置映射&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR asciihword
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR cjk
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR email
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR asciiword
WITH english_stem;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR entity
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR file
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR float
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR host
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR hword
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR hword_asciipart
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR hword_numpart
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR hword_part
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR int
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR numhword
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR numword
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR protocol
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR sfloat
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR tag
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR uint
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR url
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR url_path
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR version
WITH simple;
ALTER TEXT SEARCH CONFIGURATION public.config_2_gram_cjk
ADD MAPPING FOR word
WITH simple;
&lt;/code>&lt;/pre>&lt;ol start="10">
&lt;li>再次测试&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>SELECT to_tsvector('Doraemnon Nobita「ドラえもん のび太の牧場物語」多拉A梦 野比大雄χΨψΩω'), to_tsquery('のび太'),
to_tsquery('野比大雄'),
to_tsvector('Doraemnon Nobita「ドラえもん のび太の牧場物語」多拉A梦 野比大雄χΨψΩω') @@ to_tsquery('のび太'),
to_tsvector('Doraemnon Nobita「ドラえもん のび太の牧場物語」多拉A梦 野比大雄χΨψΩω') @@ to_tsquery('野比大雄');
&lt;/code>&lt;/pre>&lt;ol start="11">
&lt;li>修改 postgresql.conf&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo nano /etc/postgresql/11/main/postgresql.conf
&lt;/code>&lt;/pre>&lt;p>11 是我的 postgresql 版本号，如果版本不同，替换为您所用的版本号即可。&lt;/p>
&lt;p>按键 Ctrl + W 并输入 shared_preload_libraries 跳转到该配置所在行，修改引号内内容为 pg_cjk_parser.so&lt;/p>
&lt;ol start="12">
&lt;li>更新 Pleroma 的搜索配置和索引&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo -Hu pleroma -s $SHELL -lc &amp;quot;./bin/pleroma_ctl database set_text_search_config public.config_2_gram_cjk&amp;quot;
&lt;/code>&lt;/pre>&lt;p>根据数据库大小差异等待时间也有长有短，期间可能出现 ”NOTICE: word is too long to be indexed DETAIL: Words longer than 2047 characters are ignored.“ 不用管它。跑完后结果会显示 &amp;ldquo;UPDATE XXX&amp;rdquo;。&lt;/p>
&lt;p>&lt;strong>如果之前安装了 RUM 索引，这个命令可能会执行失败，报错大概这个样子：&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>** (DBConnection.ConnectionError) tcp recv: closed (the connection was closed by the pool, possibly due to a timeout or because the pool has been terminated) lib/ecto/adapters/sql.ex:760: Ecto.Adapters.SQL.raise_sql_call_error/1 lib/mix/tasks/pleroma/database.ex:218: [Mix.Tasks.Pleroma.Database.run/1](https://Mix.Tasks.Pleroma.Database.run/1) (stdlib [3.12.1.2](https://3.12.1.2)) erl_eval.erl:680: :erl_[eval.do](https://eval.do)_apply/6 (elixir 1.10.4) lib/code.ex:341: Code.eval_string_with_error_handling/3
&lt;/code>&lt;/pre>&lt;p>如果出现这种情况，需要手动去跑下卡住的那行命令。&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo -u postgres psql
\c pleroma;
UPDATE objects SET updated_at = NOW();
&lt;/code>&lt;/pre>&lt;p>可能要等待较长一段时间，更新完毕后会有 ”UPDATE XXX“ 的提示。（参考： UPDATE 4406338 等了三十分钟左右）&lt;/p>
&lt;ol start="13">
&lt;li>重启 postgrsql 服务&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>sudo systemctl restart postgresql
&lt;/code>&lt;/pre>&lt;p>理论上 postgresql 和 pleroma 二选一进行重启即可，由于上面变动了 shared_preload_libraries 需要重启 postgresql 。之后搜索便更新完毕了，试着在实例搜索框搜索看下效果如何。&lt;/p>
&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://wiki.iroiro.party/doku.php?id=pleroma:zh-search">https://wiki.iroiro.party/doku.php?id=pleroma:zh-search&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>《真·女神転生Ⅴ》一周目体验</title><link>https://suicablog.cobaltkiss.blue/posts/shin-megami-tensei-5/</link><pubDate>Tue, 26 Apr 2022 09:29:26 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/shin-megami-tensei-5/</guid><description>&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#暗黑宝可梦">「暗黑宝可梦」？&lt;/a>&lt;/li>
&lt;li>&lt;a href="#风格独特的恶魔">风格独特的「恶魔」&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#邪典立绘设计">「邪典」立绘设计&lt;/a>&lt;/li>
&lt;li>&lt;a href="#恶魔与阵营">「恶魔」与阵营&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#废墟大地圖">废墟大地圖&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#设计精妙的废墟要素满满">设计精妙的废墟要素满满&lt;/a>&lt;/li>
&lt;li>&lt;a href="#迷路过程中的合理引导与硬核元素">迷路过程中的合理引导与「硬核」元素&lt;/a>&lt;/li>
&lt;li>&lt;a href="#游达识建议玩过游戏再来看">游「达识」（建议玩过游戏再来看）&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#港区大荒漠">「港区」大荒漠&lt;/a>&lt;/li>
&lt;li>&lt;a href="#品川区各种意义上的光污染">「品川区」，各种意义上的光污染&lt;/a>&lt;/li>
&lt;li>&lt;a href="#千代田高低差的混沌与秩序灰色战场">「千代田」，高低差的混沌与秩序灰色战场&lt;/a>&lt;/li>
&lt;li>&lt;a href="#台东区神之领域前线">「台东区」，神之领域前线&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#补充评价">补充评价&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h1 id="暗黑宝可梦">「暗黑宝可梦」？&lt;/h1>
&lt;p>虽说「P5 天下第一」这句话听过无数遍，但是之前我并没有玩过 Atlus 的女神异闻录系列游戏，更别提更加小众的异闻录之前的女神转生系列。玩《真·女神转生 Ⅴ》之前我看到友邻玩《宝可梦传说：阿尔宙斯》，因对其开放世界地图和可以随意捕捉可爱的宝可梦产生了兴趣，于是也去玩了。在那之前我已经至少一年没认真玩单机游戏了，玩阿尔宙斯那阵子（我不是宝可梦系列粉丝）可以说是不分昼夜十分尽兴，然而玩到主线几乎通关时，地图的每个地方也转遍了，兴致就逐渐消减了，到了最后需要开启全部宝可梦图鉴去见阿尔宙斯的阶段我已经不想满地图去抓宝可梦了。&lt;/p>
&lt;p>就在这个时候，我听说了在玩家群体中有「暗黑宝可梦」名号的真女神转生系列，看到最新作的五代可以在大地图上与恶魔交易、沟通、对战，整体评价又相当不错，就直接原价买了数字版（发文的时候正在进行七折限时优惠活动），一玩可好，又彻底收不住了。&lt;/p>
&lt;h1 id="风格独特的恶魔">风格独特的「恶魔」&lt;/h1>
&lt;h2 id="邪典立绘设计">「邪典」立绘设计&lt;/h2>
&lt;p>《真·女神转生 Ⅴ》在 NS 平台独占发售，仅港区有中文语言，属于非热血王道向的 JRPG 类型游戏，故事发生地为立于（并没有完全）毁灭的东京废墟之上的达识（魔界）。特别说下包括其衍生作在内的之前的主画师&lt;a href="https://zh.moegirl.org.cn/%E9%87%91%E5%AD%90%E4%B8%80%E9%A9%AC">金子一马&lt;/a> ，他绘制的众「恶魔」（或异闻录中的人格面具）设计精妙，风格「邪典」，许多经典恶魔立绘即便在画师更换的后作仍然得到继承，可以说是为系列作品提供了标识性特征。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650940794/post/Fafnir_ef6csz.jpg" title="金子一马设计的「钢龙」法夫纳" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650940794/post/Fafnir_ef6csz.jpg" alt="金子一马设计的「钢龙」法夫纳">
&lt;/a>
&lt;span class="caption">金子一马设计的「钢龙」法夫纳&lt;/span>
&lt;/div>
&lt;p>推荐 BIlibili 这个视频： &lt;a href="https://www.bilibili.com/video/BV1DP4y147kH">真女神转生&amp;amp;女神异闻录系列的灵魂人物——恶魔绘师金子一马的万魔殿-钢铁的法夫尼尔&lt;/a> 可以从视频中关于法夫纳这一个「恶魔」的设计的详细分析窥见金子一马在设计上的独特考量。真女神四代开始恶魔等角色由土居政之绘制，他设计的「恶魔」更加美型，除开对市场的妥协考虑不谈，部分恶魔设计我觉得也非常有新意，比如本作中女娲的恶魔形态抛弃了人首蛇身的形象，选择将头发延伸为蛇身，而头发下的身体如蛇头一般悬在半空，既保留了人型的协调感，又具有新意，兼具美与奇异的特征。&lt;/p>
&lt;h2 id="恶魔与阵营">「恶魔」与阵营&lt;/h2>
&lt;p>本系列所说的「恶魔」不仅包括像别西卜这样大家传统认知中的恶魔，也不是只是有「邪恶」气息的怪物才叫恶魔，天使、怪物、神灵与魔人，以及在故事最开始和人造魔人合体的人类主角化身的「创毘」，不论是秩序方、混沌方还是中立态度，都统一以「恶魔」来称呼。&lt;/p>
&lt;p>曾经的神灵们被唯一神夺取了智慧贬为恶魔，人类食取含有智慧的果实后，被神驱逐，其智慧被恶魔觊觎。唯一神统治下的世界，同时拥有智慧与力量的「创毘」是禁忌的存在，在神的法则下，即便恶魔食下人类也无法得到其智慧。东京受胎后的秩序混沌双方恶战下，秩序方的神与混沌头领路西法都不知所踪。到了本作所在的时间，主角意外进入魔界「达识」险些被恶魔杀死之际被人造魔人青神所救，打破了禁忌合体为强大的「创毘」，禁忌被破除，神的统治逐渐被质疑，众恶魔蠢蠢欲动，本作故事由此展开。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650945558/post/no-place-for-demon_m7fegl.jpg" title="成功邀请恶魔成为了仲魔，但我没位子了" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650945558/post/no-place-for-demon_m7fegl.jpg" alt="成功邀请恶魔成为了仲魔，但我没位子了">
&lt;/a>
&lt;span class="caption">成功邀请恶魔成为了仲魔，但我没位子了&lt;/span>
&lt;/div>
&lt;p>在 NS 上发售的同系列游戏还有高清移植作《真·女神转生 Ⅲ》，它也是该系列第一次 3D 化的尝试，其主角「人修罗」也作为五代 DLC 中的强大对战角色被无数玩家一次次挑战。五代剧情承接「东京受胎」后的三代，不过即便没玩过三代也不影响五代的游玩体验和剧情理解。结局走向只取决于结局前非常明显的一个分支选项的倾向判断（秩序/混沌/中立），但是主角的阵营倾向实际由游玩过程中主线支线与众恶魔打交道时不同的选择来决定，主角阵营与结局选择一致可以获得额外的奖励并轻松获取之后的部分支线任务，不一致也没有大碍，而若要玩隐藏结局还需留意一些支线。&lt;/p>
&lt;p>我和很多玩家一样，游玩下来对游戏中重要 npc 没什么感情。这一方面是普普通通的剧情导致的，另一个原因是，在我们的游玩过程中，比起那些角色，我们更多时间是在大地图上接触形形色色性格各异的「恶魔」。即便是主要角色中接触较多、感情较深的青神和天逆每也都是恶魔。一片废墟的光景下，和恶魔的有趣互动让气氛压抑的东京也显得活泼了起来。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/demon_tvsabc.jpg" title="没人邀请做仲魔的软泥怪的碎碎念" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/demon_tvsabc.jpg" alt="没人邀请做仲魔的软泥怪的碎碎念">
&lt;/a>
&lt;span class="caption">没人邀请做仲魔的软泥怪的碎碎念&lt;/span>
&lt;/div>
&lt;p>大地图中恶魔遍布，接触便会开始战斗，战斗期间我们可以邀请佢来当「仲魔」（即恶魔伙伴），大部分时候玩家要针对佢的阵营和性格博取他们欢心，为此可能常常要「见鬼说鬼话」，时而认怂时而凶狠，必要时还要用财物收买，一个不小心让恶魔不爽了，对方可能拿了钱直接就跑了，结果「人财两空」。恶魔看见你的队伍中有佢同族还会给你塞好东西或帮你恢复体力，让你照顾好同伴。在主角逐渐变得强大后，路上弱小的恶魔可能见到您就逃跑，战斗到末尾还可能求饶，此时可以狠心杀掉，也可收佢做仲魔，还可勒索钱财。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/jackfrost_tckuwc.jpg" title="部分恶魔相遇会有彩蛋对话" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/jackfrost_tckuwc.jpg" alt="部分恶魔相遇会有彩蛋对话">
&lt;/a>
&lt;span class="caption">部分恶魔相遇会有彩蛋对话&lt;/span>
&lt;/div>
&lt;p>在游戏支线中我们还时不时需要在拥有不同主张的恶魔之间进行选择。以游戏前期第一个影响阵营判定的支线为例，您很可能首先在「致力于帮助弱小恶魔」的飞天处接到一个打倒「诱惑弱小恶魔」的菈南希的任务，但后面好不容易找到了菈南希，她又会说飞天实则在利用放弃梦想的弱小恶魔建立私人军队。至于帮助谁嘛，全看您个人选择，选择过后主角阵营就会向秩序或混沌一方倾斜。&lt;/p>
&lt;h1 id="废墟大地圖">废墟大地圖&lt;/h1>
&lt;h2 id="设计精妙的废墟要素满满">设计精妙的废墟要素满满&lt;/h2>
&lt;p>五代在喜爱 JRPG 这一类型游戏的玩家群体中广受好评，尽管其因去除了历代经典的复杂迷宫与剧情简单化而让一些老玩家感到不满，但反过来说，这些处理也吸引了像我这样的新玩家。对我来说，除了经典的每一代都有的恶魔交涉与合成系统外令人感到有趣外，最吸引我的莫过于本作的四个设计精妙、末世魔界感拉满的大地图了。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/far-away-demon_ikrci0.jpg" title="远远地在大雾中看见断桥上的庞大魔神亚蒙" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650945556/post/far-away-demon_ikrci0.jpg" alt="远远地在大雾中看见断桥上的庞大魔神亚蒙">
&lt;/a>
&lt;span class="caption">远远地在大雾中看见断桥上的庞大魔神亚蒙&lt;/span>
&lt;/div>
&lt;p>尽管画面显示出的似乎只是一片废墟，但这些倒塌物、坍塌结构实则构成了地图路线，并为寻找收集要素提供了难度。主角有时需要在如同多米诺骨牌一样倒塌的高楼之间跳跃才能到达目的地，而为了登到顶楼又可能要在错落的地形间与破破烂烂的楼层中寻找路线。类似于《旷野之息》中克洛格的收集要素「未满」通常出没于楼与楼之间狭小的缝隙中、只有从高处不慎跌落到恶魔横行的地面才能发现的烟雾之间、一直都能看见可就是找不到路可以过去的显眼楼顶上，不论战斗难度困难还是简单，收集要素想要全部得到可都要费一番功夫。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650945558/post/weiman_xleztd.jpg" title="未满" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650945558/post/weiman_xleztd.jpg" alt="未满">
&lt;/a>
&lt;span class="caption">未满&lt;/span>
&lt;/div>
&lt;h2 id="迷路过程中的合理引导与硬核元素">迷路过程中的合理引导与「硬核」元素&lt;/h2>
&lt;p>迷路的过程令人痛苦，让眼睛和心灵都感到疲惫的第二章大地图「品川」以及高低落差感十足的第三章大地图「千代田」尤其让人难受。但是找到道路后那种豁然开朗的感觉又令人无比舒畅，一张迷雾笼罩的地图在探索下逐渐变得清晰，上面标记的收集要素全部集齐后更会感觉充满了成就感。不要想着依靠小地图找路，高低差虽然会在地图上有所显现，但不会帮你有效寻路，就好比在重庆导航没什么用一样。初次进入一张新地图，未经过的领域在地图上被黑雾笼罩，除此之外还有大片大片圆型紫红色迷雾区域，它们因「祸冢」的阻碍而生成，必须把每个区域的数个祸冢清理干净才能得到清晰的地图。这个设计从侧面引导玩家优先寻找每一大片圆形紫红色迷雾中心的祸冢，解锁每一个地图的过程的思路是非常清晰的。&lt;/p>
&lt;p>虽然游戏不能随心所欲存档也不会自动保存，但是地图上设置的存档点数量极多，存档点之间可以任意跳转，且第一章地图前中期的九头蛇 boss 战后就可以获得可随时在非战斗时跳回最近存档处的特殊道具。需要特别说明的是，本作除非用免费 dlc 安全模式难度或购买刷经验的「御魂」DLC，否则在其他的难度下若等级差异较大，路边遇到的恶魔都可能会让你 game over，即便选择简单与普通难度也是如此，若没有随时存档的习惯，一旦死亡便只能从很久之前的存档重新来过。第一次玩这个系列推荐像我一样使用简单难度并随时存档，这样既不至于玩 safety 难度战斗体验过差，可以体验到本作回合制战斗的乐趣，也不至于路上碰到一个恶魔还没能行动就被敌方连续暴击干爆。&lt;/p>
&lt;p>（触发暴击会新增一个行动点，我方敌方都是如此，路上没有「先发制人」的话 hard 难度真的随时都在死亡边缘）&lt;/p>
&lt;h2 id="游达识建议玩过游戏再来看">游「达识」（建议玩过游戏再来看）&lt;/h2>
&lt;p>玩家一周目通关的大部分时间大概都用在了地图探索部分。二周目部分玩家可能会为了 DLC 高难度人修罗战斗打磨仲魔合成数据并钻研技能，但这不是我关注的重点。我的关注点在地图探索过程带给我的神奇体验。关于游戏中的四张大地图我有很多话想唠，如果看了上面的介绍后，您觉得您喜欢这个游戏，&lt;strong>下面关于每章大地图的感想涉及地图设计带来的游玩体验透露，相较剧情剧透可能更影响初次游玩体验，请酌情观看或直接关闭去玩游戏&lt;/strong>。&lt;/p>
&lt;h3 id="港区大荒漠">「港区」大荒漠&lt;/h3>
&lt;p>这是主角以及玩家第一个接触的魔界领域。乍一看港区（此港区非彼港区）就是沙尘漫天飞的黄色荒漠，配合凄凉的 BGM 的确是给人世界（好像）真的毁灭了的末世感。不过沙漠中除了恶魔，还能看到城市残留的街道和建筑物，抬头能看到「东京受胎」的灭世痕迹（详细可以去找三代东京受胎的过场动画看）。尽管城市残破不堪，但山啊河啊并不在意。穿梭于废墟之间时不时可以看到大片绿荫与之间的清澈溪流，美人鱼、阿娜希塔女神隐藏其中，立交桥旁上的坡坡灵鸟佳塔由四处盘旋，一旦被它发现就会被追着不放，而山上藏着佢的蛋，坏心眼的焰尾鸡会怂恿你去偷窃。（这里做恶魔的「大哥」帮着偷蛋，后面恶魔会做您的「小弟」帮着导航）&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map1_dc5wae.jpg" title="视线中几乎都是这个色调，不过环境也比较多样" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map1_dc5wae.jpg" alt="视线中几乎都是这个色调，不过环境也比较多样">
&lt;/a>
&lt;span class="caption">视线中几乎都是这个色调，不过环境也比较多样&lt;/span>
&lt;/div>
&lt;p>不管怎么说这一章地图整体色调还是相对明亮的，在章节结束后紧接着的第二章主线，原本就较为阴郁的故事走向一个十分压抑的节点。之前还觉得没必要的校园生活仿佛就是为了在这里被彻底破坏而存在的，刚玩到恶魔不断袭击的教学楼迷宫和紫红色调视觉污染品川地图时我真的很怀念「港区」地图……&lt;/p>
&lt;h3 id="品川区各种意义上的光污染">「品川区」，各种意义上的光污染&lt;/h3>
&lt;p>前面提到多次的「品川区」真的让我印象深刻。首先我们要在一个结构并不复杂但绝望氛围十足的教学楼中爬楼，爬完楼追着游戏中我觉得外观最恶心的拉赫姆来到折磨眼睛的紫红色达识区域，这一章后面大段的时间我们要在或诡异或嘈杂的音乐声中找人、迷路、迷路……夜深人静时带着耳机盯着 switch 的屏幕，一边在视觉污染中晕 3D ，一边在魔音绕梁中迷路，这份体验对我来说也是十分特别了。逐渐习惯这里的气氛后，主角来到新一片废墟，这里在过去似乎是繁华的商业街，背景音乐十分欢快，闭上眼睛不去想画面，好像在车水马龙的都市夜色下自在地漫步一样，睁开眼睛却只看到令双眼难受的紫红色天空与散落一地的瓦砾，人类消失不见，恶魔横行霸道，顿时感到荒谬无比，那一瞬间我对这章的地图好感提升了不少。另外，越是这样乍一看让人感到麻烦的地图，在开拓更多区域后越容易感到满足。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map2-1_tozfxb.jpg" title="集装箱上方飞过并发出诡异笑声的巴古斯让我想到《玩具熊的五夜后宫》" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map2-1_tozfxb.jpg" alt="集装箱上方飞过并发出诡异笑声的巴古斯让我想到《玩具熊的五夜后宫》">
&lt;/a>
&lt;span class="caption">集装箱上方飞过并发出诡异笑声的巴古斯让我想到《玩具熊的五夜后宫》&lt;/span>
&lt;/div>
&lt;p>而前面所有压抑的心情，都在我穿过长而幽静的隧道、看到远远的光点、来到明亮又平和的精灵聚落后得到了安慰！在前面逐渐麻木的我，完全没想到这一地图还有这么一片光明祥和的区域……后续主线期间若没什么重要的事我是不愿意回品川的，但是精灵聚落是品川的例外，无论主线进度发展到什么阶段，我都会时不时回精灵聚落探望这里的精灵与被营救的学生，甚至给我种回家了的错觉。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map2-2_r5nwrd.jpg" title="走到这里仿佛偶然踏入桃花仙境" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map2-2_r5nwrd.jpg" alt="走到这里仿佛偶然踏入桃花仙境">
&lt;/a>
&lt;span class="caption">走到这里仿佛偶然踏入桃花仙境&lt;/span>
&lt;/div>
&lt;h3 id="千代田高低差的混沌与秩序灰色战场">「千代田」，高低差的混沌与秩序灰色战场&lt;/h3>
&lt;p>进入这张地图抬头便能望见天空中激战的恶魔们，在地上寻路时不时会碰到互损另一阵营的恶魔。我们要尽量时刻站在高处的楼房塌面上，一不小心掉入下方便容易被恶魔包围，并且下方烟雾弥漫，非常容易迷失方向，需要尽快回到上面找到方向。想要收集全部未满，还不得不频繁在下方打转。而尽管上空视野广阔，但性情凶恶且会飞的诸多凶恶恶魔会不看你等级高低直接攻击，「明明看到对面楼顶的未满/存档点/严冢但就是过不去啊」的情况也频繁出现。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969785/post/map3_edbafi.jpg" title="灰色调的千代田实际玩时没觉得很压抑" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969785/post/map3_edbafi.jpg" alt="灰色调的千代田实际玩时没觉得很压抑">
&lt;/a>
&lt;span class="caption">灰色调的千代田实际玩时没觉得很压抑&lt;/span>
&lt;/div>
&lt;p>这一章最后的「魔王城」迷宫我认为难度适中，但是到了倒数几关总是被风扇吹跑的话会觉得烦躁。老玩家觉得这个迷宫相较系列之前的迷宫太过简单，新玩家则觉得风扇设计太折磨人。相较「魔王城」迷宫我个人更爱有设计感的大地图，相较在狭小的空间被风扇到处吹着跑更喜欢在辽阔废土上痛苦并愉悦地迷路 XD。&lt;/p>
&lt;h3 id="台东区神之领域前线">「台东区」，神之领域前线&lt;/h3>
&lt;p>到这里游戏已经很接近一周目结尾了，本章地图环境色调为银白色。相较品川区而言，台东区的山峦地貌与城市废墟更好地融合在了一起，沿山道路与山顶都能清晰看到下方的街道与楼房，而品川区有山的地方和城市废墟几乎是割裂的。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map4-1_p7e3jb.jpg" title="初始地的视野" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map4-1_p7e3jb.jpg" alt="初始地的视野">
&lt;/a>
&lt;span class="caption">初始地的视野&lt;/span>
&lt;/div>
&lt;p>这一章刚进入地图就站在一个相对较高的地理位置，可以以俯视视角查看四周，圣鸟迦楼罗会近距离从头顶飞过，暂时无法触发攻击（需要到山上的某个位置才能触发），同时地图无论是靠近楼顶的空间还是接近地面的低空都有银龙法夫纳飞过，身型比图鉴中看到的要庞大许多，初见十分有视觉冲击力，它还会发出奇异的震鸣声，仿佛预示着它即将对主角发动无情的攻击。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map4-2_nvykin.jpg" title="本章地图特别的「魔方」设计部分" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650969786/post/map4-2_nvykin.jpg" alt="本章地图特别的「魔方」设计部分">
&lt;/a>
&lt;span class="caption">本章地图特别的「魔方」设计部分&lt;/span>
&lt;/div>
&lt;p>本章主线与部分支线 boss 来源于各国著名神话传说，配合银白色的环境与有故神圣磅礴感的 BGM，以及为成为神而向「王座」前行的主线任务，这个地图有种圣域一般的氛围，相较于明显因赶工呈现出半成品形态、连迷宫都称不上的「万古神殿」，更有最终战前线的紧张感。&lt;/p>
&lt;h1 id="补充评价">补充评价&lt;/h1>
&lt;p>游戏中我还有个非常喜欢的点。各种支线 boss 几乎完美融入了环境，与此同时与这些恶魔初次打照面的冲击感却丝毫不减。如果您玩过《旷野之息》并在荒郊野外偶然遇到过龙，应该能想象到初见时的那种震撼，那就是我想要表达的冲击感。上面提到的佳塔由、迦楼罗和亚蒙只是游戏中的很少一部分带给我冲击的 boss。四章大地图均包含特定地点才可触发攻击动作的在高空飞行的恶魔，而在地图的其他大部分地方我们可以经常看到恶魔在空中盘旋，却碰不到摸不到，像是港区必须在主线临近结尾重返港区到新区域才能碰到的塞特与一旦忘记存档贸然挑战必然因为等级差暴死的黄龙、品川区集装箱边缘的闪电鸟、千代田十分显眼的发着金黄色光辉的荷鲁斯以及台东的迦楼罗。&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1650971915/post/monster-nearby_a0mvuc.jpg" title="不管哪次看到阿巴顿都会感到害怕，正面那张扭曲的大嘴更是吓人" data-fancybox="shinmegami">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1650971915/post/monster-nearby_a0mvuc.jpg" alt="不管哪次看到阿巴顿都会感到害怕，正面那张扭曲的大嘴更是吓人">
&lt;/a>
&lt;span class="caption">不管哪次看到阿巴顿都会感到害怕，正面那张扭曲的大嘴更是吓人&lt;/span>
&lt;/div>
&lt;p>当然除了我上面提到的最终章迷宫赶工问题、第二章大地图可能造成的视觉不良感受外，游戏还有比较明显的掉帧问题，在距离不算很远的恶魔都会出现掉帧现象，不过游戏加载速度很快，读档时间非常短，掌机模式下游玩过程流畅几乎不会卡顿。其他的新老玩家观点有差异的部分我感觉大多是制作方为在吸引新玩家的同时保留真女神系列老味道的妥协/改进，部分新恶魔的形象不再邪气外露而是让人想到美人会让老玩家在怀念金子老师的同时吸引一些可能被之前画风劝退的新玩家，开阔的大地图相较环境单一的迷宫显然更符合现代玩家喜好，但会牺牲一些迷宫的解密乐趣，合成系统做了一些方便的设计使得合成容错率变得更高，增多存档点却依旧不做即时存档在保留一丝「老游戏」的「硬核感」同时使探索过程变得更轻松了。&lt;/p>
&lt;p>一周目过后我暂时没有去玩多周目的动力，虽然地图探索十分有趣，但是如此荒凉的场景、复杂的路线还是会让我在二周前打退堂鼓，但丝毫不影响我第一周目对游戏地图设计的高评价。我或许是少数先了解到真女神系列后接触异闻录系列的新玩家，在这之后经友邻推荐，我也在 PC 上购买了《女神异闻录 4》，玩了一段时间但还没有通关，之后不出意外通关后也会前来写写感想。&lt;/p></description></item><item><title>《四五口径女郎》观影笔记</title><link>https://suicablog.cobaltkiss.blue/posts/ms45/</link><pubDate>Sat, 11 Dec 2021 22:53:46 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/ms45/</guid><description>&lt;p>&lt;em>无关电影的碎碎念：
我之前并没有使用豆瓣标记书影音或写观影笔记的习惯，刚看了电影《四五口径女郎》，突然想我为何不把内心短暂的想法记录下来呢。然而，写到 fedi 上，文字太容易被我的碎碎念淹没，我暂时也没有长久使用 neodb 的计划，想来想去还是写到博客吧，之后想要转移到其他地方也可以呀。可是不知从何时开始，我总暗暗觉得写在博客的东西要精致，博客不适合放零碎的文字……但这样下去这观影笔记似乎就只能一拖再拖了，于是干脆试着开个头，自然这篇笔记也不会写得很长。&lt;/em>&lt;/p>
&lt;p>首先要感谢蓝盒子的放映员湖博士每周给大家反映电影！&lt;/p>
&lt;p>放映员给的电影简介里有这么一段话：“她拒绝让复仇仅仅成为观众的娱乐，拒绝让它成为女主纯粹的胜利时刻，不管场面显得有多么夸张荒谬，她都在演出一场冷静的悲剧。”于是看到之前那么害羞保守的 Thana (Zoë Lund)身穿凸显身材的靓丽黑红色服饰，跟着并未实际威胁到她人生安全、在人来人往的大街上纠缠搭讪她的男人走时，着实感受到这电影不是一部复仇爽剧。&lt;/p>
&lt;p>果然之后 Thana 已经不单单是为自保杀死男人，她画起浓妆穿上暗色调的衣服，穿梭在黑夜的曼哈顿“猎杀”随机目标。有时她把自己当诱饵，走到强盗聚集的无人空地；有时她不带伞漫步在雨夜，接受富豪钱与烟与性的交易后杀死富豪和司机；有时她隐匿在电话亭，瞄准亲吻推拉中的情侣中的男性，浅笑着一路追到公寓门口……最后，她杀死职场上不断骚扰自己的男性上司，无差别击杀万圣节派对上的所有男性————到她被她的女性同事用一把刀击倒。&lt;/p>
&lt;p>Thana 从受害者转化为加害者，与其说是复仇不如说是宣泄。最初的伤痛，无从倾诉，也无法愈合，失语的嘴无法出声寻求帮助，就好像无数弱势者求助的话语被淹没、扼杀、无视一样。强暴威胁她的男人早就死了，被分尸处理了，但是恐惧不会消失，伤口不会痊愈，于是她紧握象征着绝对暴力的四五口径手枪，击杀拥有力量与权利的男人们————以更凶暴的力量对抗凶暴。凶暴在一次次侥幸未被惩罚后变得愈加强烈，紧绷的神经被男人的任意一个“有潜力的威胁或挑逗信号”拨动；男人隔着修女的长袍抚摸她、赞扬她的躯体，男人撩起她的袍子，顺着长袜摸到她的大腿跟，摸到冰冷的手枪，之后被 Thana 击杀。以这发枪声为指令，Thana 开始了她的屠杀派对，无论是只顾生意与颜面不想和爱人争论的男的，还是兴致勃勃说着哪里的岛运来的三百刀处女的男的，还是与她毫无瓜葛的男的，全都要死，全都得死。看不下去的女性同事拿起餐桌上的刀刺向 Thana，Thana 尖叫着扭头将枪口指向惊恐的同事，看到是自己熟悉的女性，嘶哑着说出了片中唯一一句台词：“sister.”&lt;/p>
&lt;p>虽然电影预告给人愉快的复仇剧本犯罪片的感觉，Zoë Lund 最后穿上性感修女套装大杀特杀似乎也有利用某种娱乐性质的符号化象征令观众愉悦的嫌疑————不过再仔细想想也可能是 Thana 在刻意将自己人生结尾设计为一场愉快的“演出”：修女服是自我救赎，长至大腿跟的长袜是利用男人的欲望进行引诱，引诱之下是枪与暴力，电影就这样在暴力、性感与纯洁的不协调组合下迎来血腥的悲剧终结……一场彻头彻尾的带有黑色幽默气息的悲剧。&lt;/p></description></item><item><title>白日痴话：沙漠里的野兽</title><link>https://suicablog.cobaltkiss.blue/posts/daydream1/</link><pubDate>Sat, 11 Dec 2021 00:27:20 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/daydream1/</guid><description>&lt;p>沙漠里一只野兽，被太阳烘烤的半死不活头晕目眩，早已忘记自己为什么来到这鬼地方。&lt;/p>
&lt;p>走着走着它看到一片绿洲，便欣喜地在那里居住了一段时间。&lt;/p>
&lt;p>远远的看见一匹骆驼迈着沉重的步伐朝更远的方向走去，远远的看见几条鱼干瘫在沙子上被曝晒，远远的看见一只蜥蜴以迅雷不及掩耳的速度将自己埋进沙坑。&lt;/p>
&lt;p>野兽在绿洲活得相当自在逍遥，过了一段时间，它收到已经不知道在哪里活着的骆驼的信件，看完后野兽烦躁不安地走来走去，最后它收拾好行李再度在沙漠中前行。&lt;/p>
&lt;p>但野兽已经太久没有在沙漠中生活了，没过几天它便又回到了半死不活的状态。之后它开始想自己最初到底为什么来沙漠，那些咸鱼在变成鱼干前为什么来沙漠。&lt;/p>
&lt;p>「大概不是来这里找绿洲的吧。」&lt;/p>
&lt;p>野兽想回绿洲了，但是迷失了方向的它早已无法回头，「我想我只能去寻找下一个绿洲。」&lt;/p>
&lt;p>野兽就这样在寻觅着一片又一片绿洲，时而快乐，时而感到腻烦，时而品尝一下濒死的滋味。时光流逝，野兽心想，它肯定早就偏离最初的方向了，但它也找到了一条属于自己的道路，尽管这条道路歪歪扭扭，崎岖不堪。&lt;/p>
&lt;p>野兽还想到，那些咸鱼死前或许会为自己离开海水来到陆地感到骄傲，「但也可能只感到绝望，觉得自己傻透了」，野兽摇摇头不再多想。&lt;/p>
&lt;p>但野兽时不时还是会想起那匹给它寄信的骆驼。&lt;/p></description></item><item><title>恋爱小游戏杂谈</title><link>https://suicablog.cobaltkiss.blue/posts/something-about-romance-game/</link><pubDate>Fri, 10 Dec 2021 00:20:34 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/something-about-romance-game/</guid><description>&lt;p>杂谈向，似乎玩了 obey me!后很难再找到相似的恋爱游戏……有大正爱丽丝与 Red Embrace: Hollywood 的 spoilers&lt;/p>
&lt;p>之前恋爱小游戏玩了不少，但很少有让我玩得真情实感的。抛开耽美向先不谈，大多数乙女游戏里的 mc 都有预设形象，女主的形象也做得越来越丰富立体……但这就有个问题：没办法代入女主，无论怎么玩剧情多么好，我都感觉自己在看别人的故事。&lt;/p>
&lt;p>（吐槽：绝大多数都是亚麻色头发 orz，为什么一定要是亚麻色头发？！）&lt;/p>
&lt;p>之前我倒也不怎么在意这点，以为我觉得乙女游戏都是这样的，而所谓好坏不同结局也不过是选项堆积起来的结果，我根本懒得凭自己的意志做选择题，一边一边做排除法去预测直到玩出想要的结局……反正我只是来看剧情。&lt;/p>
&lt;p>（倒是玩耽美游戏《鬼畜眼睛》时有试着做很多选项组合的尝试，因为游戏做了不少对话上的细微分歧，攻略上不会写这些，自己探索很有趣）&lt;/p>
&lt;p>直到玩《Red Embrace: Hollywood》我才开始不去管攻略试着自己玩（也没有官方的攻略，都是玩家自制），这个也不算乙女游戏，mc 可以自设形象选择性别（男/女/无性别），其中一条没有被剧透的线还让我心梗了很久……另外它从剧情人设来说也不能算是严格意义上的恋爱游戏，如果沉浸其中无视 spoilers，必定会在玩出某些结局后感受到极大的精神冲击（非 romance 层面），但因为作者文笔相当厉害，我在玩出隐藏结局前也确实体验到了恋爱的苦涩与甜蜜——越是感到心动越在后面被作者屠地惨不忍睹 orz（但其实被虐的很爽，就是会短暂地怀疑人生罢了）。&lt;/p>
&lt;p>但 RE: H 不管人设和剧情再怎么新奇（离谱），从游戏性来说还它依旧是一款传统的文字游戏。&lt;/p>
&lt;p>后来玩《Mystic Messenger》我也一度陷进去了，游戏性是我之前从未体验过的，非常新奇有趣。但时间与现实同步这点也让人感到疲累，以至于到现在我还没玩愚人节 dlc，因为实在不想再紧盯时针害怕错过聊天室了。另外，官方今年虽然一直在角色生日与周年庆上更新壁纸，但游戏内容并没有大更新，虽然社区依旧蛮活跃的，但打通感兴趣的角色剧情后我也就没有再打开 app 的热情了。 （但它作为恋爱游戏，剧情方面有一些其他令我郁闷不已甚至感觉游戏性被破坏的地方，之前 mm 相关碎碎念里吐槽过很多次这里不再念叨了）我从这个游戏开始逛 reddit 社区，开始接触英文使用者的玩家社区，看到一些男性玩家带着调侃的语气截图游戏里一些明显针对女角色的浪漫台词。&lt;/p>
&lt;p>大正爱丽丝这游戏起初是被它的「肉食性女主」噱头吸引的，恰好 steam 上可以玩也很方便，但后来弃掉了（严重剧透注意），因为我频繁地感觉到女主自主行动的强烈意志，女主完全脱离玩家控制、自己操控起剧情的时刻非常多，事实上真相的确是女主在推动剧情发展，掌握着节奏和剧情走向，而可攻略角色们的真实身份与结局令我感到沮丧，让我感到最终的终极对象只有爱丽丝，其他的人是幻影，是不完整的，连个体都算不上，而最终他们深爱的、一起生活的女主也算不上一个个体……这游戏之后我对恋爱游戏的「剧情深度」、「剧情反转」、「mc 人物设计」有了些别的想法。&lt;/p>
&lt;p>obey me!不是它所在公司制作的第一部恋爱游戏，根据粉丝所言，这家公司之前做的游戏都偏向于传统乙女向手游，有个人路线，花钱支付以提前看到剧情等……obey me!应该是企划了很久的一个全新尝试，并在发布时主要面向欧美玩家，一年后才推出日文版本。从官推来看，英文甚至西语使用者玩家给出的回应明显超过日文玩家；从人设、剧情和对话风格来看，obey me!是欧美风格的游戏和日乙游戏的混合产物，你既能听到日文语音（但几乎都是新人声优），也能看到熟悉的标签式角色设计（傲娇、执事、腹黑等），但是在英文环境与不那么日系的 live2d 立绘下，角色又能给习惯了日乙的玩家带来新奇感（虽然我不清除用日语的玩家还有没有这样的感受就是了）。 obey me!的 mc 虽然没有立绘没有性别，但的确也有渠的个性，然而游戏整体给你的感觉是，你是主角，你是来这里感受快乐的人，你不是来这里看别人谈恋爱的旁观者。&lt;/p>
&lt;p>obey me!剧情里也时常有严肃的部分，甚至有为了写一些玄幻剧情但没把控好节奏结果逻辑崩坏的部分，但它无论主线剧情还是接连不断的活动的主要走向依旧是欢乐的，意味着除非游戏里一些地方踩到了你的雷点（或者抽卡氪金一无所获……），那你玩这个游戏感受到的就是纯粹的快乐，一堆明明很强大但却很脱线的角色都在让你开心（当然还有部分让人心跳加快的小剧情），轻松的氛围就是来娱乐你的，而不是构建起一套错综复杂的伦理剧/悬疑剧/哲理大部头让人纠结的……并非我讨厌后面这些类型，而是既然我选择来玩「和纸片人恋爱」的游戏，我就想体验纯粹的「我和纸片人恋爱玩耍」的快乐……为这一目的服务的恋爱游戏里，无论从剧情角度看还是从游戏性方面看，在我心里，到目前为止没有一个比 obey me!做的好。&lt;/p></description></item><item><title>做了一段时间鸡尾酒……</title><link>https://suicablog.cobaltkiss.blue/posts/making-cocktail-for-a-while/</link><pubDate>Wed, 20 Oct 2021 22:16:26 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/making-cocktail-for-a-while/</guid><description>&lt;p>做鸡尾酒这个想法一年前就冒出来过，作为一个不常喝酒、酒量平庸、喝不惯啤酒白酒也认不得几款洋酒的人，我大概只是觉得穿袖子捋到手臂中间穿西装马甲的人调起酒来超级帅，所以想要模仿。抱着模糊的想法，一年过去了，大概两个月前我才总算开始尝试学习，于是买来了各种调酒工具，朦朦胧胧看着油管 b 站各种家庭调酒视频，翻着一年前就买来但因为 90% 的材料我都没有所以从来没有用过的调酒书，一点点收集工具与各种酒瓶子，现在也能用手头的材料磕磕绊绊地给自己和家人做出一些好喝的鸡尾酒了。我想记录下自己已经制作过的酒，以及到目前为止家庭调酒的心得~&lt;/p>
&lt;h2 id="劝退家庭调酒菜鸟的第一道障碍眼花缭乱的工具和五彩斑斓的酒瓶">劝退家庭调酒菜鸟的第一道障碍：眼花缭乱的工具和五彩斑斓的酒瓶&lt;/h2>
&lt;p>一年前让我一点点放弃掉调酒想法的无异就是调制所需的各种陌生工具与酒了。工具书买了，买了却找不到一款能用已有材料制作的经典调酒，要工具工具莫得，要酒酒也莫得。鸡尾酒是舶来品，估计大多数中国家庭和我家一样有存一些啤酒白酒与葡萄酒，但什么威士忌、伏特加、金酒、龙舌兰根本就没有，而上面说得这些除了威士忌都是极为常见的鸡尾酒基酒——也就是说做一款鸡尾酒，这些酒中的一款或者多款是这杯酒必不可少的主体部分。&lt;/p>
&lt;p>没有自然只能去买啦！&lt;/p>
&lt;h3 id="调酒工具">调酒工具&lt;/h3>
&lt;p>先说工具。一般来说家庭调酒对工具、酒与制作步骤的要求都不怎么严格，你用勺子筷子替代吧勺、用玻璃罐子替代雪克壶都没有问题，不过长吧勺、雪克壶（一般用波士顿雪克壶和三段式较多）这两个最基本的工具价格也不贵，买来做酒仪式感满满，调酒也会变得便利！我个人更习惯用波士顿雪克壶，似乎这种雪克壶因为内部空间更大，更有利于空气与酒的融合（这是使用摇荡法的一个目的，另外两个目的是冷却和混合），两个单独的杯子也可分别用来当搅拌用杯子；而三段式雪克壶（顾名思义由三个部分组成，也叫英式雪克壶）自带过滤效果，可以而搅拌法与摇荡法是最常用的两个混合方法。吧勺有各种长度。有一些另一端带叉子。&lt;/p>
&lt;p>除了长吧勺和雪克壶，还推荐入手滤冰器、盎司杯和榨汁机。常见的滤冰器有朱莉普滤冰器与霍桑滤冰器，后者又称「万能滤冰器」，三段式雪克壶应该可以免去额外的滤冰环节，但如果你时不时看一些调酒视频，应该会发现有一些酒会用到「双重过滤」，这时你还需要一个三角式滤网，一般用来筛掉果汁残渣与泡沫。由于鸡尾酒中经常使用以柑橘类为主的新鲜水果，刀具是必不可少的，不过水果刀应该是大部分人家里都会有的烹饪工具。，而为了更方便地取得果汁，手动与自动的榨汁机也是推荐入手的工具，其中手动通过手指手腕发力挤压的压汁器用来压榨最常用的柠檬和青柠（当然你手劲比较大同时不在意满手沾柠檬汁也可以完全手挤……），其他水果则可以用自动榨汁机提取果汁。盎司杯推荐入一个 30ml 与 45ml 的，45ml（1.5 盎司）是鸡尾酒制作中最常用的计量单位，大部分鸡尾酒的基酒都会用 45ml，30ml、60ml 的也十分常见，一般盎司杯的内部也标有刻度。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/suicablue/image/upload/v1634744102/post/cocktail/pjimage_qnimst.jpg" alt="调酒工具">&lt;/p>
&lt;p>工具最后提一嘴被许多新手调酒者忽略的关键要素：冰。几乎所有的鸡尾酒，不论最后的成品中有没有放冰块，调酒过程中几乎所有的鸡尾酒都要用到冰块，冰块的质量、冰块的大小对鸡尾酒的品质或制作过程有关键影响。制作完全透明的冰块有一定操作要求（网上常见的利用保温箱制作大冰块需要你家有足够大的冰箱），当我们至少可以让存放冰块的那层抽屉里不放肉类和一切可能让冰块染上杂味的食物；保证你的模具中格数够多，或冻入足够多的模具，这样才不至于在制作时因担心冰块不足而吝于使用必要数量的冰；记得屯一些大的冰球或冰块，一些酒会用到。如果你做酒的频率很高，也可以考虑入一个制冰机，想要冰块时可以快速制作，可以省去不少麻烦。&lt;/p>
&lt;h3 id="酒与其他材料">酒与其他材料&lt;/h3>
&lt;p>洋酒虽然在国内相对与其他酒类少见一些，但也不难买，必要的一些酒价格也不贵。百元以内或者 100~200 区间的常用基酒，像是金酒、伏特加、朗姆酒、龙舌兰这些，都很容易买到，一般也不用太担心买到这个价位的假酒，考虑到造价成本很难有盈利空间，还是担心的话，官方旗舰店是不会出错的选择；威士忌、白兰地也是较为常用的基酒，便宜又好喝、适合调酒的威士忌不少，一般波本和调和的较多，价格较贵的威士忌和白兰地一定要注意购买渠道。我喝过的牌子不多，大多数买的都是一百元左右的酒，在橙色软件上搜索基酒名，排在前面的那几款一般用的人比较多不会太出错，想看推荐可以在油管和 B 站搜「卡斯故事」找百元系列作为参考。&lt;/p>
&lt;p>我推荐新手从干金酒、伏特加与朗姆酒这三款基酒开始买，它们使用频率极高且一百元左右都有高性价比的品牌，朗姆酒可以入一瓶适合调酒的白朗姆，还可以入一瓶陈年的深色朗姆。但如果你有特别偏好的基酒，比方说，你特别喜欢金汤力，那你可以多买一些金酒回来，还可以多试几个不同金酒；又或者你非常想自己做一杯玛格丽特，那你就需要买一瓶龙舌兰回家。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/suicablue/image/upload/v1634746560/post/cocktail/be34175442524969b1e06dbfacb5ec6b5_unazel.jpg" alt="基酒">&lt;/p>
&lt;p>除基酒外，你可能还经常在调酒视频中见到一些其他的奇奇怪怪的酒，比如干味美思和甜味美思，又比如阿佩罗和金巴利，还有什么可可利口酒、咖啡利口酒、樱桃利口酒。制作特定鸡尾酒时，一些基酒外的利口酒是必不可少的，比如在教父这杯当代经典调酒中，杏仁利口酒 DISARONNO 不可或缺。上面提到的几款似乎使用频率都不低，当你很可能买回来后发现，根本没怎么用过，建议各位先去 &lt;a href="https://iba-world.com/iba-official-cocktail-list/">IBA（International Bartenders Association 国际调酒师协会）&lt;/a> 或任意存有鸡尾酒酒谱的网站翻翻看，根据过往品酒经历、饮食口味把自己感兴趣的鸡尾酒标注出来，看看它都需要什么材料，对应的材料再去搜搜看还能做什么鸡尾酒，最后再确认要不要购买某种酒。&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/suicablue/image/upload/v1634746053/post/cocktail/W1siZiIsIjE1ODYzL3Byb2R1Y3RzLzMyMTg3NzcyLzE2MDU1MDAxODRfOGNhYjgwNjhhNDY3YmE1MzhkMzgucG5nIl0sWyJwIiwidGh1bWIiLCI2MDB4NjAwIl1d_ffwj87.png" alt="DISARONNO">&lt;/p>
&lt;p>除了酒，你还需要其他的非酒精材料。在工具中我提到柑橘类水果在鸡尾酒中使用非常频繁，像柠檬、青柠这样一年四季都很容易买到的便宜水果推荐自己买来榨汁，作为原料和装饰物，它们使用频率极高；新鲜水果是调酒师最喜欢的材料之一，当季的甜甜的水果是最棒的原材料；实在买不到新鲜水果，可以用果汁替代，但记住新鲜的永远是最好的。有一款叫做 screwdriver（可译为螺丝起子）的制作看起来很简单的酒，伏特加与橙汁 1：1，加冰搅拌即可，但是很多人做出来却难以入口，就是因为没有使用新鲜橙汁或橙子质量差。所以质量有保证的果汁或新鲜的水果是非常必要的！&lt;/p>
&lt;p>如果你喜欢气泡的清爽，气泡水是必不可少的，除了亲民常见的可乐雪碧外，苏打水也是包容性极强且常用的一种气泡水，一般屈臣氏就能买到（私心推荐下大象牌苏打水，气泡非常丰富、保存时间长且易于购买，价格也不贵），根据自己需要还可以屯一些做金汤力需要的汤力水（也叫奎宁水）、最近因为环球影城又火起来的黄油啤酒需要的忌廉汽水（cream soda）或是姜汁汽水（ginger beer）。&lt;/p>
&lt;p>为了更圆润与丰富的口感，糖浆也是调酒的伙伴。最常用的 simple syrup 在家即可快速制作，将白糖与水按照 1：1 的比例进行熬制，之后冷却备用即可随时取用；用来给鸡尾酒染上漂亮红色的石榴糖浆十分常用，像龙舌兰日出、粉红佳人中都必须添加，一大瓶物美价廉可以用很久；根据自己的口味，去购买自己可能喜欢的各种口味的糖浆，如枫糖糖浆、甘蔗糖浆、夏威夷风味糖浆、薄荷糖浆。&lt;/p>
&lt;h2 id="已经做过的一些鸡尾酒配方与简单感想">已经做过的一些鸡尾酒配方与简单感想&lt;/h2>
&lt;p>准备好酒、工具和其他原料就可以开始做酒啦！下面简单整理下到目前为止做过的鸡尾酒，里面大多属于经典调酒（在 IBA 可以查看全部经典调酒与分类），也建议感兴趣的朋友从经典调酒开始制作与品尝。因为平时懒得布景找好光线大多没有自己拍照，附图均为网络图片。&lt;/p>
&lt;p>这里不更新啦！鸡尾酒配方都放在这边咯 → &lt;a href="https://blog.moonblast.boats/mixing">mixing&lt;/a>&lt;/p></description></item><item><title>利用 Github Pages 与 Github Action 搭建并部署 Hugo 博客</title><link>https://suicablog.cobaltkiss.blue/posts/use-github-pages-to-create-your-own-blog-and-deploy-automatically/</link><pubDate>Sat, 18 Sep 2021 17:02:51 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/use-github-pages-to-create-your-own-blog-and-deploy-automatically/</guid><description>&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="#-正式开始前你需要知道">♡ 正式开始前你需要知道&lt;/a>&lt;/li>
&lt;li>&lt;a href="#-快速在本地生成一个博客">✦ 快速在本地生成一个博客！&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#sites-和-bin">Sites 和 Bin&lt;/a>&lt;/li>
&lt;li>&lt;a href="#第一次使用-git-和-ssh">第一次使用 Git 和 SSH？&lt;/a>&lt;/li>
&lt;li>&lt;a href="#来安装主题吧">来安装主题吧！&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#-自动部署准备">✦ 自动部署准备&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#两种部署方案">两种部署方案&lt;/a>&lt;/li>
&lt;li>&lt;a href="#上传公钥">上传公钥&lt;/a>&lt;/li>
&lt;li>&lt;a href="#生成-token">生成 Token&lt;/a>&lt;/li>
&lt;li>&lt;a href="#建立存放博客根目录的仓库并储存到本地">建立存放博客根目录的仓库并储存到本地&lt;/a>&lt;/li>
&lt;li>&lt;a href="#将博客根目录上传至-github-新建的仓库">将博客根目录上传至 github 新建的仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="#为根目录仓库生成-secrets">为根目录仓库生成 Secrets&lt;/a>&lt;/li>
&lt;li>&lt;a href="#建立存放-public-目录的仓库">建立存放 public 目录的仓库&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#建立仓库">建立仓库&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#-自动部署">✦ 自动部署！&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#确认以下步骤是否已经完成">确认以下步骤是否已经完成：&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-action">Github Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#自定义域名注意事项">自定义域名注意事项&lt;/a>&lt;/li>
&lt;li>&lt;a href="#-部署完成后续管理">✧ 部署完成后续管理&lt;/a>&lt;/li>
&lt;li>&lt;a href="#-一些可能有用的-tips">✧ 一些可能有用的 tips&lt;/a>&lt;/li>
&lt;li>&lt;a href="#-参考链接">✧ 参考链接&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;p>&lt;em>年初时写过一篇很混乱的 hugo 搭建笔记： &lt;a href="https://suicablog.cobaltkiss.blue/posts/deploy-hugo-as-a-github-pages-project/">在 Windows 上搭建 Hugo 博客之 Github 部署填坑记&lt;/a> 。这篇的思路大致是将本地 &lt;code>hugo&lt;/code> 命令生成的public文件夹丢到github的名称为&amp;lt;github_username&amp;gt;.github.io的repository上，写了新博文后public内的内容需要更新并重新部署到github pages上。由于用了自定义域名，还有一些细节问题需要注意（后经友邻提醒，CSS无法正常加载可能有其他原因，应该不需要借助_config.yml使网页正常显示；也不需要每次删除public内部分内容，直接覆盖并调整后续操作即可；CNAME等需要保留的文件放进static文件夹中即可），虽然每次发布的过程也称不上麻烦，但还是会觉得有些繁琐，并因为Github Action运转失败（也不想借助VPS与github之外的第三方的应用来进行部署），我也一直只能借助电脑进行添加、删除、修改博文的操作，而无法在其他机器上快速编辑。&lt;/em>&lt;/p>
&lt;p>&lt;em>最近不少友邻在尝试新建博客并尝试自动部署，看着看着也想久违地挑战下之前一直失败的自动部署，总算是成功了！部署过程中参考了不少教程和笔记，也踩了一些坑，希望这篇笔记可以帮到对静态博客感兴趣的朋友~&lt;/em>&lt;/p>
&lt;h2 id="-正式开始前你需要知道">♡ 正式开始前你需要知道&lt;/h2>
&lt;ul>
&lt;li>操作系统为 Windows 10，Mac 的操作过程应该是相似的，将涉及到系统操作时的步骤替换为 Mac 的即可&lt;/li>
&lt;li>用这篇笔记的方法实现自动部署，最终效果为可以通过在其他机器上登录 github 远程修改博文与各种设定，修改后 github action 会自动运行，将改动推送到博客页面上；在本地发布新博文，依旧需要至少三步 git 操作（&lt;code>git add&lt;/code>、&lt;code>git commit&lt;/code> 和 &lt;code>git push&lt;/code>），因为远程可以进行操作，每次 push 前最好添加一步 &lt;code>git pull&lt;/code> 避免版本混乱&lt;/li>
&lt;li>搭建前需要本机安装 &lt;a href="https://git-scm.com/">git&lt;/a> 和 &lt;a href="https://gohugo.io/getting-started/installing/#windows">hugo&lt;/a> ，还需要你有一个 &lt;a href="https://github.com/">github&lt;/a> 的帐号，相关步骤这里不再阐释；如果你有自定义域名的需求，你还需要去购买域名或者申请免费域名&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-快速在本地生成一个博客">✦ 快速在本地生成一个博客！&lt;/h2>
&lt;h3 id="sites-和-bin">Sites 和 Bin&lt;/h3>
&lt;p>你的 hugo 目录下此时应该有两个文件夹：Sites 和 bin 。bin 文件夹平时不用去管，如需更换 hugo 版本可用新版本的 hugo 直接将原文件覆盖，在这里查看并下载各版本的 hugo： &lt;a href="https://github.com/gohugoio/hugo/releases">Hugo Releases&lt;/a> ，个别主题需要你使用extended版本：&lt;/p>
&lt;blockquote>
&lt;p>If you process &lt;code>SCSS&lt;/code> or &lt;code>SASS&lt;/code> to &lt;code>CSS&lt;/code> in your Hugo project, you need the Hugo &lt;code>extended&lt;/code> version, or else you may see this error message:&lt;/p>
&lt;p>&lt;code>error: failed to transform resource: TOCSS: failed to transform &amp;quot;scss/main.scss&amp;quot; (text/x-scss): this feature is not available in your current Hugo version&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://gohugo.io/troubleshooting/faq/#i-get-tocss--this-feature-is-not-available-in-your-current-hugo-version">Hugo Frequently Asked Questions&lt;/a>&lt;/p>
&lt;p>使用 &lt;code>hugo&lt;/code> 命令，需要将 hugo 添加到环境变量： &lt;a href="https://ripple-zjw.github.io/2019/%E6%90%AD%E5%BB%BAhugo%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91/">搭建 Hugo 时需要注意的坑&lt;/a>&lt;/p>
&lt;p>进入 Site 文件夹，鼠标右键点击 Git Bash 或打开 Git Bash 后 cd 到这个目录，创建你的 hugo 博客所在目录(替换&lt;example>为你的博客名称)：&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new site &amp;lt;example&amp;gt;
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>emample
├── archetypes
│ └── default.md
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
&lt;/code>&lt;/pre>&lt;p>简单说下每个目录和文件是做什么的。archetypes 文件夹用于存放模板，&lt;code>hugo new posts/new-post.md&lt;/code> 会使用 default.md 中的模板生成新博文；config.toml 是存放博客基础设置的文件，一般会被安装后的主题中的同名文件替代；content 用来存放 page 与 post，所有新博文都要存放在 content 中；data 用于存放数据模板；layouts 用来存放布局模板文件，如果你想要调整你安装的主题中的页面布局，可以在 layouts 中放入同名文件，hugo 将优先读取根目录中的 layouts 文件；static 用来存放静态资源，比如自定义 css、图片图标等；themes 用来放你想要使用的主题。&lt;/p>
&lt;p>进入新生成的博客文件夹并初始化一个空的 git 本地仓库，之后博客文件夹里会出现一个隐藏的.git 文件夹。&lt;/p>
&lt;pre tabindex="0">&lt;code>cd &amp;lt;example&amp;gt;
git init
&lt;/code>&lt;/pre>&lt;h3 id="第一次使用-git-和-ssh">第一次使用 Git 和 SSH？&lt;/h3>
&lt;p>&lt;em>如果之前进行过 git 全局配置，且本机上存有 SSH key，可以忽略这步。SSH key 一般存储在系统盘 C: \Users&amp;lt;用户名&amp;gt;.ssh 目录中，git 全局设置存在 C: \Users&amp;lt;用户名&amp;gt;.gitconfig 文件中。&lt;/em>&lt;/p>
&lt;p>先来生成 SSH 密钥！&lt;/p>
&lt;pre tabindex="0">&lt;code>ssh-keygen -t rsa -C &amp;quot;example@email.com&amp;quot;
# -C 的意思是注释，后面的邮箱可以填写任意邮箱，与github账号邮箱不一致也是可以的
&lt;/code>&lt;/pre>&lt;p>之后会跳出一堆提示，在系统提示输入 passphrase 时直接回车不添加。生成的密钥对会储存在 C: \Users&amp;lt;用户名&amp;gt;.ssh 中，公钥存放在 id_rsa.pub 里，私钥存放在 id_rsa 里，&lt;strong>请妥善保管密钥对，公钥稍后我们需要使用，私钥非极特殊情况请勿上传到本机外的地方！&lt;/strong>&lt;/p>
&lt;p>接下来在博客根目录进行 git 的配置！&lt;/p>
&lt;pre tabindex="0">&lt;code>git config user.name &amp;quot;examplename&amp;quot;
git config user.email &amp;quot;example@email.com&amp;quot;
&lt;/code>&lt;/pre>&lt;p>建议将引号内的内容替换为准备部署博客的 github 账号用户名和密码，当然，用其他的名称和邮箱替代也可，只是这样每次本地提交 commit 时 github 上会无法查看提交者信息。&lt;/p>
&lt;p>之后点进.git 目录查看 config 文件，可以发现里面多了 name 和 email 信息。&lt;/p>
&lt;p>&lt;em>网络上很多教程的这两行命令后有添加 &lt;code>--global&lt;/code>，这个的意思是全局配置，如果 git 账户没有进行本地配置，将默认使用全局配置，使用 &lt;code>--global&lt;/code> 后 name 与 email 信息将存在系统目录的 C: \Users&amp;lt;用户名&amp;gt;.gitconfig 文件中。&lt;/em>&lt;/p>
&lt;h3 id="来安装主题吧">来安装主题吧！&lt;/h3>
&lt;p>在 &lt;a href="https://themes.gohugo.io/">这里&lt;/a> 挑选你心仪的主题，看看demo的效果是否满意，如果没有demo也不要紧，下载到本地后也能够在部署前查看。&lt;/p>
&lt;p>有三种安装主题的方法。最简单粗暴的一种是在主题的 github 页面直接下载主题打包文件，解压到 themes 中就好了；另外两种可以参考 &lt;a href="https://themes.gohugo.io/themes/hugo-theme-hello-friend/#how-to-start">hello-friend&lt;/a> 这个主题的说明，在themes目录下&lt;code>git clone&lt;/code>或者&lt;code>git submodule add&lt;/code>，后者能较方便的升级主题(根目录上传到GitHub后，themes文件夹会显示为一个无法打开的带白箭头的文件夹图标，之后action要想跑起来一定要记得加上submodule的配置）。一般根据主题的说明文档进行安装就好了~&lt;/p>
&lt;p>下载好的主题目录下会有一个 exampleSite 的示例文件夹，把里面的东西复制下来，覆盖根目录中的文件和文件夹，打开新的 config.toml 文件，修改 theme = &amp;ldquo;example-theme&amp;rdquo; 为你安装的主题名，主题名要与 themes 中的主题文件夹名称一致。这样一个主题就安装好了。&lt;/p>
&lt;p>在 sites 目录下 git bash，&lt;code>hugo server&lt;/code> 来看下主题的效果！（&lt;code>hugo server -D&lt;/code> 的话草稿也会显示，注意是大写 D）跳出一大堆提示后，在任意浏览器打开 http://localhost:1313/ 就能实时查看博客效果与调整。如果的博客设置有误，页面会无法查看，请先排除错误后再进行尝试。不需要查看后 Ctrl+C 退出即可。&lt;/p>
&lt;hr>
&lt;h2 id="-自动部署准备">✦ 自动部署准备&lt;/h2>
&lt;h3 id="两种部署方案">两种部署方案&lt;/h3>
&lt;p>一般来说利用 Github Action 进行自动部署有两个方案。一个是建一个 repository 并使用两个分支（main 和 gh-pages），这样做的不太好的是，该 repository 只能设置为公开，main 中的博客根目录内容谁都可以看（包括草稿状态的已上传博文），除非付费将页面公开（听说 gitlab 可以免费单独公开私有项目的页面）；另一个是建两个 repositories，一个存放根目录文件，设置为私密，另一个用来存放 public 中的内容，设置为公开。&lt;/p>
&lt;p>两个方法我都有尝试，主要说说建立两个 repositories 的部署方案。&lt;/p>
&lt;h3 id="上传公钥">上传公钥&lt;/h3>
&lt;p>我们既可以将公钥直接上传到该 github 用户的 setting 里，也可以上传到单独这个 repository 的 setting 里。前面的方法的效果是，如果你还想用这个账号建博客或者做一些其他项目，不需要二次上传公钥。&lt;/p>
&lt;p>点击 github 页面右上角头像右侧下拉按钮，进入 Settings，找到左侧页面 &lt;a href="https://github.com/settings/keys">SSH and GPG keys&lt;/a> ，点击New SSH key ，取一个便于识别的名称，下方填入之前生成的id_rsa.pub中的内容（以&amp;quot;ssh-rsa&amp;quot;开头，以邮箱结尾）。&lt;/p>
&lt;p>之后我们在本地测试看看，在 git bash 里输入：&lt;/p>
&lt;pre tabindex="0">&lt;code>ssh -T git@github.com
&lt;/code>&lt;/pre>&lt;p>成功的话会提示：&lt;/p>
&lt;pre tabindex="0">&lt;code>Hi &amp;lt;github-username&amp;gt;! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code>&lt;/pre>&lt;h3 id="生成-token">生成 Token&lt;/h3>
&lt;p>右上角 Settings 里找到 Developer settings，再点 Personal access tokens，Generate new token 生成新的 token，有效期可选永久生效（永久生效的话，这个 Token 就不要用于其他用途，只用于部署这一个 hugo 博客），否则要记得定时更换或称新生成 Token。&lt;/p>
&lt;p>Select scopes 里勾选 repo 全部内容与 workflow。最后点击绿色按钮生成。&lt;/p>
&lt;p>生成后，Token 上会浮现一串字符，将它复制下来备份。页面刷新后这个 Token 将不再显示，所以在导入 Token 前不要把它弄丢！&lt;/p>
&lt;h3 id="建立存放博客根目录的仓库并储存到本地">建立存放博客根目录的仓库并储存到本地&lt;/h3>
&lt;p>接下来建根目录用的私密仓库。右上角新建 repository，Repository name 随意填，设置为 private，创建。&lt;/p>
&lt;p>接下来将仓库 remote 到本地。复制 SSH 链接，进入 git bash，确保目前的位置是在博客根目录下。&lt;/p>
&lt;pre tabindex="0">&lt;code>git remote add origin git@github.com:&amp;lt;github-username&amp;gt;/&amp;lt;repository-name&amp;gt;.git
&lt;/code>&lt;/pre>&lt;p>&lt;em>如果你这个目录之前存有远程仓库，你需要先把之前的 orrigin 删掉，再创建新的。&lt;/em>&lt;/p>
&lt;p>&lt;em>用 &lt;code>git remote&lt;/code> 查看当前目录下所有远程仓库，如果无结果说明这里之前没有远程仓库；如果有一个已经不再使用 origin，&lt;code>git remote rm origin&lt;/code> 将它删除掉 。&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/m0_37034294/article/details/79986198">git 通过命令更换远程仓库地址&amp;mdash;&amp;ndash;和更换地址后对项目进行操作显示无权限问题&lt;/a>&lt;/p>
&lt;h3 id="将博客根目录上传至-github-新建的仓库">将博客根目录上传至 github 新建的仓库&lt;/h3>
&lt;p>确保 git bash 中位置为博客根目录，git 默认的分支应该是(master)，因为现在 github 的默认分支从 master 换成了 main（详见 &lt;a href="https://www.sohu.com/a/405073858_478315">GitHub 将替换掉 master 等术语&lt;/a> ），我们先切换分支到main：&lt;/p>
&lt;pre tabindex="0">&lt;code>git checkout -b main
&lt;/code>&lt;/pre>&lt;p>之后输入这三个命令（今后要经常和这三个指令打招呼了）&lt;/p>
&lt;pre tabindex="0">&lt;code>git add . # 添加目录下全部内容
git commit -m &amp;quot;new blog&amp;quot; # 提交说明，出问题了可以回退到之前的commit
git push -u origin main # 将本地内容推送到远程
&lt;/code>&lt;/pre>&lt;p>没有报错的话，现在已经可以在 github 刚刚创建的仓库中看到推送上去的内容了~&lt;/p>
&lt;p>检查检查有没有缺少什么东西。空文件夹不会被 push 上去，不用去管；如果有其他文件夹没有上传上去，看看你根目录下有没有.gitignore 这个文件，里面存放上传时会被忽略掉的目录与文件（比如我正在用的 Tranquilpeak 主题就会忽略掉主题文件夹，应该是用于本地魔改主题测试放置远程受影响用的），把这个文件删掉或者把里面的内容清除，再重复上面的指令，这次应该就成功了。&lt;/p>
&lt;h3 id="为根目录仓库生成-secrets">为根目录仓库生成 Secrets&lt;/h3>
&lt;p>进入刚刚建好的 repository，点进它的 Settings 中，找到 Secrets，点击 New repository secret，名称为 PERSONAL_TOKEN，内容为之前备份下来的 Token。&lt;/p>
&lt;h3 id="建立存放-public-目录的仓库">建立存放 public 目录的仓库&lt;/h3>
&lt;h4 id="建立仓库">建立仓库&lt;/h4>
&lt;p>回到 github 再建一个 repository。注意这次 repository 的名称须为 &lt;github-username>.github.io 这个格式。这个仓库要设置为公开状态。&lt;/p>
&lt;h5 id="题外话repository-名称问题">题外话：repository 名称问题&lt;/h5>
&lt;p>&lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites">Github 关于 github pages 类型的说明&lt;/a>&lt;/p>
&lt;p>个人建博客不考虑 organization 的情况。除去网络上大多数教程强调的使用 &lt;github-username>.github.io 作为 repository 名称的方法，其实还可以建一个任意名称的仓库，在不使用自定义域名的前提下，这样建起来的 hugo 博客网址为 &lt;github-username>.github.io/&lt;repository-name> 。&lt;/p>
&lt;p>比方说你 github 的用户名为 suicablue，repo 名为 my-blog，那最后你的博客域名就是 suicablue.github.io/blog 。少数派的这篇教程就是这样建起来的： &lt;a href="https://sspai.com/post/64639">使用 Hugo 从 0 到 1 搭建个人博客&lt;/a>&lt;/p>
&lt;p>确定要使用自定义域名的话，就完全不需要管 repository 的名称问题了。但想要用 github 免费提供的 &lt;github-username>.github.io 这个域名的话，就需要注意一下名称问题了。&lt;/p>
&lt;hr>
&lt;h2 id="-自动部署">✦ 自动部署！&lt;/h2>
&lt;h3 id="确认以下步骤是否已经完成">确认以下步骤是否已经完成：&lt;/h3>
&lt;p>建好两个仓库，一个私有的已经存放博客根目录内容的仓库，一个公开的空白仓库；github 账号已经上传了无 passphrase 的公钥并确保公钥可以使用，生成了 Token 并将其添加到私有仓库的 Secrets 中&lt;/p>
&lt;h3 id="github-action">Github Action&lt;/h3>
&lt;p>进入博客根目录仓库，点上方的 Actions，set up a workflow yourself，之后你会发现 github 会在根目录下新建/.github/workflows/xxx.yml 文件，下方是这个文件的编辑区域。把下面的配置复制进去，yml 文件的名称与配置第一行的 name 随意填，特别注意我添加注释的地方。&lt;/p>
&lt;pre tabindex="0">&lt;code>name: hugo-blog
on:
push:
branches:
- main # 博客根目录的默认分支，这里是main，有时也是master
pull_request:
jobs:
deploy:
runs-on: ubuntu-20.04
concurrency:
group: ${{ github.workflow }}-${{ github.ref }}
steps:
- uses: actions/checkout@v2
# with: # 如果你安装主题时用的是git submodule add
# submodules: true # 那么这三行不必注释掉，这一行填写 true
# fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: '0.88.1' # 填写你的hugo版本，可用hugo version查看
extended: true # 如果你使用的不是extended版本的hugo，将true改为false
- name: Build
run: hugo --minify
- name: Deploy
uses: peaceiris/actions-gh-pages@v3
if: ${{ github.ref == 'refs/heads/main' }} # 注意填写main或者master
with:
personal_token: ${{ secrets.PERSONAL_TOKEN }} # 如果secret取了其他名称，将PERSONAL_TOKEN替换掉
external_repository: &amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io # 填写远程仓库，不一定是这个格式，按照自己的情况写
publish_dir: ./public
cname: blog.example.com # 填写你的自定义域名。如果没有用自定义域名，注释掉这行
&lt;/code>&lt;/pre>&lt;p>格式参考 &lt;a href="https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-set-personal-access-token-personal_token">GitHub Pages action&lt;/a> ，可以根据自己需要，按照说明文档上的建议对上面的配置进一步调整。&lt;/p>
&lt;p>提交 commit，保存！之后会发现 action 在尝试运行，等待不到一分钟结果就会出来，变成绿色就说明成功啦！&lt;/p>
&lt;p>这时跑去公开仓库瞅瞅看，应该已经可以看到自动建了一个名为 gh-pages 的分支，里面出现了许多东西，此时打开你的博客域名应该已经可以看到博客内容啦！&lt;/p>
&lt;p>如果 github action 没成功跑起来也不要慌，点进 deploy 详细看下报错，一般都可以根据报错内容发现原因，对应去调整后再跑几遍即可。&lt;/p>
&lt;h3 id="自定义域名注意事项">自定义域名注意事项&lt;/h3>
&lt;ul>
&lt;li>博客根目录下的 config 文件中 base url 更换为自定义域名&lt;/li>
&lt;li>为自定义域名添加了 CNAME 记录（顶级域名也可添加四条 A 记录），详见 github 官方说明： &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#about-custom-domain-configuration">Managing a custom domain for your GitHub Pages site&lt;/a>&lt;/li>
&lt;li>部署成功后，进入公开仓库 settings，pages 页面添加自定义域名，等待 DNS 检验成功&lt;/li>
&lt;li>如果使用了 CDN（比如 cloudflare），github 上的强制 https 按钮可能不能点；cloudflare 免费提供 https 证书，如果无法正常显示 https，可以建立**强制 https **规则&lt;/li>
&lt;li>不适用 CDN 的情况下，github 已支持为自定义域名办法 let&amp;rsquo;s encrypt 证书，稍等一会儿即可生效&lt;/li>
&lt;/ul>
&lt;h3 id="-部署完成后续管理">✧ 部署完成后续管理&lt;/h3>
&lt;p>按照上述流程完成部署后，今后每次在本地执行操作前，都要记得用 &lt;code>git pull&lt;/code> 先同步本地与远程操作。&lt;/p>
&lt;p>上面我们在远程博客根目录新建了 workflow，在本地开始写新的博文前，先在本地的博客根目录进行同步：&lt;/p>
&lt;pre tabindex="0">&lt;code>git pull
&lt;/code>&lt;/pre>&lt;p>之后本地会出现.github 文件夹。记得每次在 github 远程编辑并 commit 后，本地都要 pull；而本地无论是写博文还是调整主题（主题可在根目录同名文件夹内进行调整，不建议直接对 themes 下的设定进行改动），都建议先用 &lt;code>hugo server&lt;/code> 本地查看效果，确定能够正常显示博客与调整后的内容后再 push 到远程。&lt;/p>
&lt;p>到这里，hugo 博客的搭建与部署过程就结束啦！（撒花）&lt;/p>
&lt;hr>
&lt;h3 id="-一些可能有用的-tips">✧ 一些可能有用的 tips&lt;/h3>
&lt;ol>
&lt;li>执行 &lt;code>hugo server&lt;/code> 过程中错误退出 git，导致之后执行时 1313 端口被占用&lt;/li>
&lt;/ol>
&lt;p>windows+r 输入 cmd 打开窗口：&lt;/p>
&lt;pre tabindex="0">&lt;code>netstat -aon|findstr &amp;quot;1313&amp;quot; 筛选使用1313端口的进程
taskkill /f /PID xxxxx 杀死占用的进程
&lt;/code>&lt;/pre>&lt;p>来源： &lt;a href="https://blog.csdn.net/qq_45728623/article/details/118859532">端口号被占用？怎么办&lt;/a>&lt;/p>
&lt;ol start="2">
&lt;li>空文档无法提交的解决方法&lt;/li>
&lt;/ol>
&lt;p>在你想要提交的空文档下新建一个.gitkeep 文件，里面填入以下内容：&lt;/p>
&lt;pre tabindex="0">&lt;code># Ignore everything in this directory
*
# Except this file !.gitkeep
&lt;/code>&lt;/pre>&lt;p>来源： &lt;a href="https://blog.csdn.net/fengchao2016/article/details/52769151">git 提交空文件夹&lt;/a>&lt;/p>
&lt;ol start="3">
&lt;li>我不在意博客根目录公开，我不想要建两个仓库&lt;/li>
&lt;/ol>
&lt;p>这种情况大致的操作过程和上面是一样的，只是如果你需要使用&lt;username>.github.io 这个免费域名时同样要注意仓库名称问题，并将 workflow 文件里的这行删掉：&lt;/p>
&lt;pre tabindex="0">&lt;code>external_repository: &amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io
&lt;/code>&lt;/pre>&lt;p>之后你的仓库中会有 main 和 gh-pages 两个分支，main 分支存放博客根目录文件，gh-pages 存放页面文件。&lt;/p>
&lt;ol start="4">
&lt;li>github pages 如何才能使用呢？&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>发布路径在默认分支 main 的根目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布路径在 gh-pages 分支&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发布路径在默认分支 main 的 docs 目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>来源： &lt;a href="https://www.jianshu.com/p/02b3343295ac">Hugo 配合 GitHub 搭建博客（Windows 10）&lt;/a>&lt;/p>
&lt;p>这边笔记的思路就是&lt;strong>发布路径在 gh-pages 分支&lt;/strong>，使用其他思路也可成功完成部署，但需要调整 workflow 设置。需要用 docs 替换默认的 public 目录的话，博客根目录下 config 中添加这一行：&lt;/p>
&lt;pre tabindex="0">&lt;code>publishDir = &amp;quot;docs&amp;quot;
&lt;/code>&lt;/pre>&lt;ol start="5">
&lt;li>为 Hugo 添加 favicon&lt;/li>
&lt;/ol>
&lt;p>一般情况下，在 static 目录下直接添加 favicon.ico 就可以添加上 favicon 了，但也不排除部分主题设置不同的情况。要让多平台支持 favicon 的显示，可以参考这篇博文： &lt;a href="https://www.kiroule.com/article/add-favicon-to-hugo-based-website/">Add Favicon to Hugo-Based Website &lt;/a>&lt;/p>
&lt;h3 id="-参考链接">✧ 参考链接&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://gohugo.io/troubleshooting/faq/#i-get-tocss--this-feature-is-not-available-in-your-current-hugo-version">Hugo Frequently Asked Questions&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/m0_37034294/article/details/79986198">git 通过命令更换远程仓库地址和更换地址后对项目进行操作显示无权限问题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites">About GitHub Pages&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://sspai.com/post/64639">使用 Hugo 从 0 到 1 搭建个人博客&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#about-custom-domain-configuration">Managing a custom domain for your GitHub Pages site&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/qq_45728623/article/details/118859532">端口号被占用？怎么办&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/fengchao2016/article/details/52769151">git 提交空文件夹&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/02b3343295ac">Hugo 配合 GitHub 搭建博客（Windows 10）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.kiroule.com/article/add-favicon-to-hugo-based-website/">Add Favicon to Hugo-Based Website &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1647964">折腾 Hugo | GitHub Pages | Github Actions 自动构建发布免费个人网站&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tomial.github.io/posts/hugo%E4%BD%BF%E7%94%A8github-action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%88%B0github-pages/">Hugo 使用 Github Action 自动部署博客到 Github Pages&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://akilar.top/posts/f752c86d/">使用 Github Action 实现全自动部署&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰：GitHub Actions 入门教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ripple-zjw.github.io/2019/%E6%90%AD%E5%BB%BAhugo%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9D%91/">搭建 Hugo 时需要注意的坑&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mantyke.icu/posts/f185ce41/">Alola World | 暨简明麻瓜快速念咒 Hugo 搭建笔记&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>通配符域名证书申请与自动续费（Nginx，Debian 10）</title><link>https://suicablog.cobaltkiss.blue/posts/wildcard-with-cloudflare-using-certbot/</link><pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/wildcard-with-cloudflare-using-certbot/</guid><description>&lt;p>仅需申请一张多域名通配符证书，便可保护主域名以及下面的多个子域名。
使用 CloudFlare 作为 DNS provider，而提供 CloudFlare 的插件安装，开始阅读请先 &lt;a href="https://certbot.eff.org/docs/using.html#dns-plugins">确认&lt;/a> Certbot是否提供你需要的插件。&lt;/p>
&lt;h1 id="通配符域名证书申请与自动续费nginxdebian-10">通配符域名证书申请与自动续费（Nginx，Debian 10）&lt;/h1>
&lt;p>之前曾经申请过主域名的证书，现在想要再添加通配符域名证书（*.yourinstance.com 格式的所有域名），或者第一次通过 Let&amp;rsquo;sEncrypt 与 Certbot 申请 SSL 证书，都可以参考这篇记录；系统配置与我不同的话，在 &lt;a href="https://certbot.eff.org/instructions">Certbot 页面&lt;/a> 上输入您的配置，注意不同系统的命令差异。&lt;/p>
&lt;p>欢迎提出用语或逻辑错误。&lt;/p>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#通配符域名证书申请与自动续费nginxdebian-10">通配符域名证书申请与自动续费（Nginx，Debian 10）&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#一-安装-snap">一. 安装 snap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#二-移除一切-certbot-相关旧软件并安装新软件">二. 移除一切 Certbot 相关旧软件并安装新软件&lt;/a>&lt;/li>
&lt;li>&lt;a href="#三-放置凭据">三. 放置凭据&lt;/a>&lt;/li>
&lt;li>&lt;a href="#四-测试自动延期是否设置成功">四. 测试自动延期是否设置成功&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="一-安装-snap">一. 安装 snap&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>debian 可以直接用 &lt;code>apt install&lt;/code> 下载软件包。非 root 用户要加上 &lt;code>sudo&lt;/code>；如果您正在使用 root 用户，则不需要添加 &lt;code>sudo&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo apt update
sudo apt install snapd
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>关闭 SSH 或退出登录，并再次登录，确保 snap 路径正常更新，之后安装 &lt;code>core&lt;/code> 来得到最新版本的 snapd&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo snap install core
sudo snap refresh core
&lt;/code>&lt;/pre>&lt;p>测试看看：&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo snap install hello-world
# 是否输出：hello-world 6.3 from Canonical✓ installed
hello-world
# 是否输出：Hello World!
&lt;/code>&lt;/pre>&lt;p>Debian 10 可能遇到的问题：&lt;/p>
&lt;p>There is a known issue affecting some Debian 10 users with snaps that depend on browser-sandbox, such as Microsoft Teams. The issues can be bypassed with the following command:&lt;/p>
&lt;p>&lt;code>sudo sysctl kernel unprivileged_userns_clone=1&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="二-移除一切-certbot-相关旧软件并安装新软件">二. 移除一切 Certbot 相关旧软件并安装新软件&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>根据你的系统任选其一将 certbot 删除：&lt;/p>
&lt;pre tabindex="0">&lt;code># 1
sudo apt-get remove certbot
# 2
sudo dnf remove certbot
# 3
sudo yum remove certbot
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>通过 snap 安装 certbot&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code> sudo snap install --classic certbot
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>确保 certbot 命令可执行
&lt;pre tabindex="0">&lt;code>sudo ln -s /snap/bin/certbot /usr/bin/certbot
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>确保已安装的插件与 Certbot snap 具有相同容器
&lt;pre tabindex="0">&lt;code>sudo snap set certbot trust-plugin-with-root=ok
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>安装 DNS 插件，&lt;code>sudo snap install certbot-dns-&amp;lt;PLUGIN&amp;gt;&lt;/code>，如果你使用 CloudFlare，直接执行：
&lt;pre tabindex="0">&lt;code>sudo snap install certbot-dns-cloudflare
&lt;/code>&lt;/pre>如果这里报错，再执行一遍步骤 4&lt;/li>
&lt;/ol>
&lt;h2 id="三-放置凭据">三. 放置凭据&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>登录 CloudFlare，在主页面上找到 API keys；如果你的 cloudflare python module 版本大于等于 2.3.1，建议复制 restricted API Token，否则复制 Global API Key&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置 DNS 凭据&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo mkdir -p /root/.secrets/
sudo touch /root/.secrets/cloudflare.ini
# 添加/.secrets目录与cloudflare.ini文件
sudo chmod 0700 /root/.secrets/
sudo chmod 0400 /root/.secrets/cloudflare.ini
# 指定权限
nano /root/.secrets/cloudflare.ini
# 编辑cloudflare.ini文件
&lt;/code>&lt;/pre>&lt;p>如果您使用 restricted API Token，按照下方格式编辑并变更 token 数值：&lt;/p>
&lt;pre tabindex="0">&lt;code># Cloudflare API token used by Certbot
dns_cloudflare_api_token = 0123456789abcdef0123456789abcdef01234567
&lt;/code>&lt;/pre>&lt;p>如果您使用 Global API Key，按照下方格式编辑并变更 key 数值与 cloudflare 邮箱：&lt;/p>
&lt;pre tabindex="0">&lt;code># Cloudflare API credentials used by Certbot
dns_cloudflare_email = cloudflare@example.com
dns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>申请证书&lt;/p>
&lt;pre tabindex="0">&lt;code>certbot certonly \
--dns-cloudflare \
--dns-cloudflare-credentials ~/.secrets/cloudflare.ini \
-d example.com
-d *.example.com
&lt;/code>&lt;/pre>&lt;p>记得将 example.com 替换为您的域名，之后若您第一次申请，可能会要求您进行 TXT 验证，按照指示在 cloudflare 上操作即可；除此之外，您还应完成主域名的 A 记录验证&lt;/p>
&lt;p>如果系统提示 Another instance of Certbot is already running，使用 &lt;code>ps -ef | grep certb&lt;/code> 指令查看 ID，并杀死进程 &lt;code>kill ID_number&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="四-测试自动延期是否设置成功">四. 测试自动延期是否设置成功&lt;/h2>
&lt;pre>&lt;code>```
sudo certbot renew --dry-run
```
&lt;/code>&lt;/pre>
&lt;p>没有报错的话证书申请与自动续期就配置完成啦，之后如果需要用主域名或者任一子域名配置代理（比如 nginx），将配置文件里需要证书 pem 路径的地方替换为生成的证书配置文件对应的路径就好了。&lt;/p>
&lt;p>参考链接：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://certbot.eff.org/instructions?ws=nginx&amp;amp;os=debianbuster">certbot wildcard certificates&lt;/a> （该地址已更新）&lt;/li>
&lt;li>&lt;a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/">Welcome to certbot-dns-cloudflare’s documentation!&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.letsencrypt.org/t/solved-another-instance-of-certbot-is-already-running/44690/2">Another instance of Certbot is already running&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hijackson.com/how-to-generate-lets-encrypt-ssl-wildcard-with-cloudflare-using-certbot/">How to Generate Let’s Encrypt SSL Wildcard using Certbot? &lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>搏击俱乐部 - 读书笔记</title><link>https://suicablog.cobaltkiss.blue/posts/fight-club-after-reading/</link><pubDate>Fri, 30 Jul 2021 01:00:54 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/fight-club-after-reading/</guid><description>&lt;p>Fedi 上琐碎的读书笔记整理（测试）&lt;/p>
&lt;p>&lt;em>一些与标题没有太大关系的碎碎念：&lt;/em>
&lt;em>很早就想写这篇博文，今天决定写却是临时起意。自从建博客之后，每写一篇博文似乎都像在进行一场仪式，这种正式感虽然督促我将自己的想法以更清晰的形式进行表达，但也导致了一个问题——我始终无法像在 fedi 写嘟文那样自由惬意地传达自己（大部分是突然出现）的情感和思考。于是今天我想试着抛弃那种仪式感，尝试将想法快速进行整理和表达。这个博客主题可能也要换掉，每次都要思考一下首页的图片用什么，博客页的图片用什么，还要存到云盘上，我不想花这个时间，想要写纯文字的东西。&lt;/em>&lt;/p>
&lt;p>&lt;em>Fedi 认识我的人大多知道我在晚上精神状态比较活跃，但最近为了生活，我想要调整自己的精神与睡眠。想法常常在深夜冒出，但现在我不允许自己花太多写博文（已经吃了安眠药的情况下脑子也会很快变糊）。于是我想试着先大致记录下一些粗略的东西，什么时候有新的想法时再来详细补充并修正文笔错误、调整文章结构。&lt;/em>&lt;/p>
&lt;p>读书之前我看在低端影视上看了《格斗俱乐部》的电影。剧情中的反转没有让我太惊讶，因为曾看过大陆一部电影（我突然怎么都想不起来它的名字，是关于假钞的，周润发是主演之一），电影中就有反转剧情，但那部电影拍摄时间距离今天并不是很久，现在想来，它大概也有致敬 Fight Club 的成分在，揭露真相时的镜头表现与 Fight Club 很相似，假想人都是疯癫的与具有反社会人格魅力的，主角则一个是疯了不自知，一个是为了脱罪而虚构人物。&lt;/p>
&lt;p>如果我按照电影发行顺序看，应该会对 Fight Club 感到更加震撼。&lt;/p>
&lt;p>电影虽然国内没有直接的观看通道，但声誉极高，我看完后却觉得有点失望，并习惯性去豆瓣、知乎搜索各种影评，希望通过那些让我欣赏到好作品中的内涵。&lt;/p>
&lt;p>但是看着看着，我突然觉得这样不对，这样没有意义，我为何一定要借助他人的言语和态度来评价电影？于是我不再去看那些，也希望自己今后在拥有清晰的评价前不要去看别人的影评，不要受到他人的影响。&lt;/p>
&lt;p>缓了缓心情后，我开始慢慢悠悠地读原著。网盘找不到直接就可以下载的电子书，于是从 play store 的 books 商店找到了这本台湾翻译的《鬥陣俱樂部》来读，先从免费试阅开始，如果还能读得惯繁体就购买。&lt;/p>
&lt;p>故事正式开始前是两个序言，读最初的那个序言时，我有种看完电影后去知乎翻「为什么很多人都对搏击俱乐部评价很高？」的回答时的烦躁感，烦躁感从这句话开始：「充其量又是那些閒得慌的白領階級，稍微把身體的蠻荒放縱與想像力在無趣的健身房和龍蛇雜處的搖頭吧再越界一點點、流一點汗、有一點點虛榮的罪惡感。」&lt;/p>
&lt;p>我当时的想法是：「我一上来便感到自己被冒犯了，不过类似的不爽感受在电影里也曾体会过。或许，我可以从小说中找到更确切的那个令我刺痛的关键点，我想那里隐藏着作者除了暴力宣泄外真正想要表达的东西，也是无数喜爱这部作品的人为之难过的地方。我已经隐约感受到它的存在了，但我想要看得更清晰一点，这样心中的烦闷感才能消失不见，但这份烦闷感也可能会转变为更加绝望的情绪。」&lt;/p>
&lt;p>接下来，我将怀抱着这样的念头，将这本书慢慢磕完。&lt;/p>
&lt;p>序言中有作者关于幽默的见解。他把描述绝望的世界观的这本书写的有趣，是不想让书读起来太悲惨，因为「悲劇頂端的悲劇實在讓人消受不起。」&lt;/p>
&lt;p>我从小就是个缺乏幽默感的人，最近啊，不是第一次看到这样以黑色幽默与嘲讽态度处事的例子了，有时也会反省起自己的生活方式来––这话是不是听着非常没劲？恩……&lt;/p>
&lt;p>「挑釁」，我在电影与小说开始以及之后要感受到的不爽或许就意味着我被挑衅了。
我因这种不爽拒绝像往常一样通过知乎和豆瓣中他人的影评在心里给电影一个高分，我今天突然想到，这是否也是一种我被挑衅而下意识做出的反抗行为？我因为向 Es 承诺读完书再去讨论，而忍受着不爽阅读，试图可以在不摧毁自己的前提下理解这本书，并想给我心中的不爽一个明确的答案––我拒绝被他人定义，被他人回答，我希望自己去寻找这个答案，这也是我对「挑衅」的回应。&lt;/p>
&lt;p>尽管我还是不喜欢搏击俱乐部中的很多东西，但阅读期间，我发现自己在逐渐受阅读的影响改变自己的行为。&lt;/p>
&lt;p>&lt;em>有天我在商场吃了晚饭，习惯性回家前在一楼逛无印良品，看到了印着熊猫图案的灰色 T-Shirt，摸起来感觉很舒服，想要，尽管我不缺 T-Shirt 穿；试用出水流畅颜色简单好看的 marker，想要，但是我实际用的不多，家里还有两根足够日常使用；看到用点点排列方便整齐写字的大本子，简洁大方，方便书写，想要，但家里已有太多本子了。&lt;/em>&lt;/p>
&lt;p>&lt;em>我在里面徘徊了好久，最终什么都没买，或许是想起了这个电影，我想到了我看 sample 时认识的新词 Yuppie（雅瘩），我是否试图用一个个品牌通过店铺装璜、商品摆放和品牌那些所谓的理念来让我的生活看上去更精致更有人味？我是否已经购买了太多类似的商品，但实际证明不仅我不一定需要用到这些，很可能它们已经变成了我的负担（让房间整理变得困难）？我最害怕的是，我逐渐被这些东西贴上标签，迷失自我，失去我真正需要的东西（说实在话，我已经几乎是这样的状态了，我只是不想变得更糟，不想更加厌恶自己）。&lt;/em>&lt;/p>
&lt;p>&lt;em>这又让我想起大一前看过的一本叫做《极简》的书，大一上英语课时我本想就这本书进行我的演讲，但我搞砸了，后来我便因羞耻将这本书抛之脑后。现在又想起来，但我并没有再看的欲望。那本书中传达的理念我已经了解了，我学不到新东西；另外，「极简主义」与「消费主义」之间有什么本质差别吗？我是说它们的核心，都是妄图通过某种理念改变生活方式，让自己活得更好，人可以借助商品的品牌表达自我，也可以被商品埋没，人可以通过丢掉非常多的东西找到自己真正重视的事物，但单调的房间也会让人感到乏味无聊。&lt;/em>&lt;/p>
&lt;p>&lt;em>不过后者倒是可以少制造一些工业垃圾，为地球环保做点贡献，另外我们还可以省点钱摆脱月光，但这并不意味着给自己挂上「极简主义者」的标签便让这个人变得闪闪发亮了，我讨厌以给自己贴标签为荣的人。极简源自对消费的叛逆，源于对生活的思考。叛逆与思考不应存在饱和的状态——即认为通过极简主义实现了理想的人生，若有人声称自己「因极简主义变得成功」，那更做作！叛逆和思考只会因某些因素而消失，永远不会达到饱和。&lt;/em>&lt;/p>
&lt;p>&lt;em>无印良品是否也是「极简主义」的代表之一？回到最初，我想我在无印良品闲逛消磨的时光可以带给我一点小小的快乐，如果我想要购买，我实际是想要这一件件商品背后承载的舒适简单的生活，可一旦购买，我实际上不过是给我已经足够混乱的房间增添新的垃圾，于是快乐在购买的那一刻到达巅峰，在购买后化为尘埃，只留下账单和叹息。于是我决定，除非我带着明确的购买目的和购买清单来这里，否则我今后只逛不买。我是极简主义者吗，我是一个反极简主义商业化的人吗？我只是在尝试思考，我的思考和行动不需要被冠上任何主义或标签，你的也不需要。&lt;/em>&lt;/p>
&lt;p>读小说时常常感到叙事混乱，到处都是只有几个字的段落，就像主角混乱的脑袋一样。有时我不得不在脑子里勾勒出电影情节来捋清逻辑关系，让自己明白小说这里在说什么，对应电影哪个部分。如果没有进行修改，那我则专注于文字和影像的不同表达方式,比如看主角手背被化学药剂灼烧的这一节，观感没有电影强烈和直观，但让我想起我半夜肚子痛并且感到想吐的那些时刻：感到自己半睡半醒，在不完全的清醒和睡梦中挣扎，在扭曲的街道城市间徘徊，听到有人跟我说话，但话语全部都被扭曲，变得断断续续，叫人抓狂。；如果进行了改编，我会愉快地吐槽；如果小说里有电影里没有的东西，或者反过来，我就会试图从中寻找一些作者真正想要表达的东西，来消除我先前的种种不满。&lt;/p>
&lt;p>有时读着读着就感到自己被冒犯了！ &lt;em>生气，为什么这代男人都是女人养大的，你们为此感到焦躁，感到身上的男子汉气质都没了，你们打了常架便觉得干净的衣服和干净的屁股是羞辱的，怎么不问问你们不知道消失去了哪里的爸爸，为什么留下你和妈妈一起生活？&lt;/em>
&lt;em>哦，于是你和你老爸谈了谈，你起初不理解他，后来你心里明白了，于是你开始做单身汉，或是你又抛下一个女人和你们的小孩去做你的男子汉，你毁灭世界毁灭家庭不给出一个答案，好你个男子汉！&lt;/em>&lt;/p>
&lt;p>有时只是觉得恶心…… &lt;em>泰勒讲述自己如何在食物里捣乱，想到豆瓣上分享的那篇中文版里被删掉的序，里面说小说热销后有个餐厅主管（如果我没记错的话）神秘地告诉作者他如何在某明星的食物里作怪，觉得……挺没意思的。&lt;/em>
&lt;em>人造脂肪肥皂……玛拉说她妈把不需要多余脂肪给身上几乎没什么脂肪的她（用来填补丰满的嘴唇），觉得家庭循环的脂肪比外来的更健康，真是把人看吐了。（这是作者在讽刺吗，还有泰勒做肥皂大卖那里），慢半拍才明白泰勒干了啥，不是像电影里那样去偷，而是骗玛拉的母亲。看到「我的母亲！你把她撒得到处都是！」时我真的不行了 orz。两个在白色脂肪上滑冰的人……太滑稽了！&lt;/em>、、&lt;/p>
&lt;p>小说里到处都是「我知道因为泰勒知道」，感觉到这里真相已经很明显了，而且小说全篇都能感受到主角（即“我”）的疯狂。
不管是看小说还是看电影，都觉得主角老板（我看先不谈工作）为人还是……可以的？电影里死了吗？我不记得，应该没有，但是小说里死了，泰勒让太空猴把办公室炸了。这也是我最无法认同的地方，为何一定要这样凶残的方式，每一次破坏行动都极可能导致死亡，破坏一切后留下的只剩下迷惘的人、疯狂的人与残骸。&lt;/p>
&lt;p>读这本书就好像在读一个疯子写的第一人称自传，全书充斥着暴力和粗俗的话语，就连我的感想也变得暴戾起来，好疲倦。小说的结尾没有烟花看，只感到非常空虚，非常绝望。虽然我还是不太喜欢它，但是它却和最近玩的受到改编电影影响的游戏一起不断让我思考很多东西，这些思考并不轻松，甚至一些令我痛苦。&lt;/p>
&lt;p>就像我上面提到的无印良品那件事一样，我的生活开始不知不觉被泰勒带来的一切冲击着产生变化，它带来的哲思依旧在我脑子里不断让我思考，受到电影影响的游戏作品（Red Embrace : Hollywood）也在进一步影响我对生命的态度。&lt;/p></description></item><item><title>塞尔达传说游玩中</title><link>https://suicablog.cobaltkiss.blue/posts/the-legand-of-zelda/</link><pubDate>Tue, 22 Jun 2021 15:52:58 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/the-legand-of-zelda/</guid><description>&lt;p>夜晚，林克和他的马 Wildcar 在平原外围的驿站休息，这个驿站是林克从初始之塔第一次乘滑翔机飞翔路过的地点。林克看着西边不知名的高山上美丽的绿色光辉，想要更近距离地看看那光景，于是便骑马朝着它飞奔。这是林克苏醒后第二次骑马远距离旅行，第一次他骑着一匹全身黑色的马从东边的卡卡利特村附近的双子驿站一路飞驰来到中西部地区，林克放下马儿让它去休息后，换了速度更快但耐力较差的 Wildcar 继续旅程。&lt;/p>
&lt;p>旅途中，迷路是家常便饭。随着天色转亮，极光消失了，旅程第二天以及之后林克再也没有找到那束光的位置，但是好奇心旺盛的他索性开始了莽撞的冒险，在记忆中从未到达的地方寻求新鲜事物带来的刺激。Wildcar 如风一般在无人的宽敞道路上奔跑着，遇见怪物便从它们身边闪过，遇见求救的人便停下帮助他们。其间，林克不乏碰到伪装成旅行者的灾厄的崇拜者，他们假装示弱或友好，稍微靠近便獠牙显现，说着“纳命来 ，勇者”想要取人性命，无一例外不被林克击败；之后林克在路上看见孤身一人站着的人类时，便会下意识备好武器护具再谨慎靠近。不知不觉，树木变得稀少，土地变成了枯黄的颜色，眼前有一座高塔，林克看到高处的塔与山便不由自主想要攀登，于是他开心地从马鞍上下来跑向高塔，没跑几步便匆忙刹住脚步，因为他注意到那高塔四面环水，水中能看到快速游动的蜥蜴怪物，水面上几只青色的魔法师一边飞一边跳着巡逻，湖水附近还有陆地上的蜥蜴怪扛着大棍警备着，实在不是能轻易靠近的地方。这个地方附近有一团黑色的乌云，乌云下总是有雷光闪现，实在是太过怪异，林克不想到那里去。然而，在林克寻找道路之时，蜥蜴怪发现了他们，林克匆忙赶着 Wildcar 朝着山谷另一边逃去，蜥蜴怪从视野中消失后，林克松了一口气，转身看见山下奇妙地耸起的伞状石柱，他又忍不住好奇想要探索一番，便留 Wildcar 在原地，自己一人飞向石林。&lt;/p>
&lt;p>在林克脚踩到草地的一瞬间，天色变得昏暗，大雨倾盆而下，神秘的声音在耳畔响起，无征兆的考验开始了。林克可能不知不觉来到了那片乌云之下，在他意识到这点时一道闪电将他附近的高大石柱劈倒，林克看着这自然降下的灾害无比恐惧，昏暗的天色、不知何时会降临的闪电、地面上不断冒出的怪物催促他赶快去找解开这特殊神庙谜题的办法，但雨水令一切攀爬动作变得困难无比，别说攀上那些柱子将解开机关所需的球状物射向高墙之内，林克自己都很难进入那机关中心所在的高墙之中。不知道林克在这个地方呆了多久，红月再次到来，而林克的精力恢复药已经用尽，非金属的武器也全都用烂了，无奈之下，时间回溯的力量让林克回到了几天前，这次他带着 Wildcar 飞快离开了这个地方，他想回到驿站，他开始怀念人的气息了，再也不想待在这四处埋伏着危险怪物与神的考验的荒凉之地。然而，林克并不知道，真正的考验才刚刚开始……&lt;/p>
&lt;p>林克再次迷路了，他找不到回去的路，因为他还没有在这片区域开塔，他看不到地图上的路线，只能凭借记忆寻找回去的路。然而，缺乏方向感的他似乎将自己和 Wildcar 带往了更遥远的地方，那里有狂暴的守护者、会使用火箭的威猛怪物、骷髅状的惨白的荒芜山谷，没有一条路看上去是安全的，没有一条路看上去是熟悉的，中途林克还碰上了电闪雷鸣的雨天，过于漫长又没有成果的旅途令一人一马都无比疲惫。林克骑马一次次徒劳地探索路线，天色变得阴沉，紫红色的凶光在草野间燃烧，就这样，他们再次迎来了红月。他们究竟在这陌生的野外呆了多久呢，已经数不过来了。林克轻轻抚摸着 Wildcar，不知道是在安慰马，还是在安抚自己。如果林克没有骑马出行，此时的他是可以自己传送回驿站附近的神庙的，然而林克此时并没有传说中的古代马具，无法将已经无比信赖他的 Wildcar 一并带回，林克只好寄希望于更远方的驿站。就这样，林克和 Wildcar 继续茫然前进着，不知走了多久的路，某一天清晨，他们终于看到了人类的面孔，林克兴奋地向这些人打招呼，之后跟着这些人缓慢地向未知的方向前进。但你知道吗，这些人走得实在太慢了！骑马的人以最低的速度前进，另一个姑娘牵着她的小毛驴在后面慢悠悠跟着，而林克和 Wildcar 无奈地夹在中间，因为不知道路线，只能也这么慢慢走着。过于缓慢的步伐、周边极端荒芜的环境都让林克不时怀疑这样做是否正确，是否能到达休息的地方……夜晚到来，林克终于听见熟悉的音乐声，他终于成功将马带到了驿站！林克赶忙托付驿站员工照顾 Wildcar，自己买了张松软的床，疲惫地睡下了。&lt;/p>
&lt;div class="figure " >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1624356000/post/gamescrenn2_tub1ar.jpg" data-fancybox="post">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1624356000/post/gamescrenn2_tub1ar.jpg" >
&lt;/a>
&lt;/div>
&lt;p>&lt;em>那之后，我带着林克和他的另一匹马再次探索其这个世界，有了前一次的教训，这次我们的旅途优先开塔，之后再悠然探险。在山地地区，我没有让林克带马前进，而是让他一人探索，因为可以在空中移动，开荒的速度变快了，看着一座座高塔变为蓝色是件非常有成就感的事情，但是却缺少了马儿相伴的温馨与细细探索的趣味。我依旧时不时迷失方位，但意料外的风景带来的惊悚、震撼与美感令人痴迷，总想要再次赌命尝试。顺着一座座神庙来到雨水滋润的卓拉领地，被发着美丽蓝光的精妙建筑与奇异美丽的卓拉族人深深吸引；再次向着极光前进却陷入雪山中依靠药剂活命，不知不觉翻阅暴风雪之地到达了格鲁德沙漠，混进女儿城购买奇珍异石的首饰；失控的巨大神兽令人畏惧，但之后不得不面对……塞尔达在游戏开始时让我感到惊奇快活，之后又让我看到了自然神威的狂暴，体验到一人一马荒野前行的孤独，收获着开拓地图的成就感，但是人也不能总是全身心投入在游戏中，我想我的塞尔达时光即将迎来一个新的旅程，或许会收获新的惊喜，或许会逐渐淡忘最初的感动，便赶忙记录下这段令我难忘的体验，希望之后我还能在这里多聊一聊这款游戏。&lt;/em>&lt;/p></description></item><item><title>Themes Gallery</title><link>https://suicablog.cobaltkiss.blue/posts/themes-gallery/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/themes-gallery/</guid><description>&lt;p>ALL custom themes in &lt;a href="https://cobaltkiss.blue/about">CobaltKiss&lt;/a>. Updated on April 30th, 2022.&lt;/p>
&lt;p>Large size images are included. Recommend browsing under WIFI.&lt;/p>
&lt;p>ORIGINAL PICTURES AS BACKGROUND FOR THE PREVIEW THEME IMAGES IN THIS COLLECTION WILL NOT BE USED FOR COMMERCIAL PURPOSE. IF YOU ARE THE AUTHOR AND YOU DON&amp;rsquo;T WANT YOUR ARTWORK TO BE USED HERE, OR YOU FIND WRONG AUTHOR IS ATTACHED TO AN IMAGE, PLEASE CONTACT ME.&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652971257/Themes%20Display/Outer_Chill_dns9ka.gif" title="Outer Chill" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652971257/Themes%20Display/Outer_Chill_dns9ka.gif" alt="Outer Chill">
&lt;/a>
&lt;span class="caption">Outer Chill&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/outer-chill.json">Right click to download outer-chill.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.deviantart.com/kirokaze">kirokaze&lt;/a>&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1652193787/Themes%20Display/television_d88kk3.png" title="television" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1652193787/Themes%20Display/television_d88kk3.png" alt="television">
&lt;/a>
&lt;span class="caption">television&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/television.json">Right click to download television.json&lt;/a>&lt;/p>
&lt;p>This is a theme for a game called &lt;em>Persona 4 Golden&lt;/em>, you can buy this game on &lt;a href="https://store.steampowered.com/app/1113000/Persona_4_Golden/">steam&lt;/a>.&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651277287/Themes%20Display/forest_socqto.gif" title="forest" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651277287/Themes%20Display/forest_socqto.gif" alt="forest">
&lt;/a>
&lt;span class="caption">forest&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/forest.json">Right click to download forest.json&lt;/a>&lt;/p>
&lt;p>Unknown author. &lt;span class="highlight-text yellow">Background image source:&lt;/span> &lt;a href="https://ro.pinterest.com/pin/712905816026681193/">Pinterest&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276919/Themes%20Display/space_violet_ekko_h2x4jp.gif" title="space violet(ekko)" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276919/Themes%20Display/space_violet_ekko_h2x4jp.gif" alt="space violet(ekko)">
&lt;/a>
&lt;span class="caption">space violet(ekko)&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/space-violet(ekko).json">Right click to download space-violet(ekko).json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.deviantart.com/kirokaze">kirokaze&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651278089/Themes%20Display/fishtank_goldfish%E2%85%A1_hvzyeq.gif" title="fishtank(goldfishⅡ)" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651278089/Themes%20Display/fishtank_goldfish%E2%85%A1_hvzyeq.gif" alt="fishtank(goldfishⅡ)">
&lt;/a>
&lt;span class="caption">fishtank(goldfishⅡ)&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/fishtank.json">Right click to download fishtank.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://mienar.com/">mienar&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651278087/Themes%20Display/mint-chocolate_xyuawo.gif" title="mint-chocolate" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651278087/Themes%20Display/mint-chocolate_xyuawo.gif" alt="mint-chocolate">
&lt;/a>
&lt;span class="caption">mint-chocolate&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/mint-chocolate.json">Right click to download mint-chocolate.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://1041uuu.tumblr.com">豊井祐太(Toyoi Yuuta)&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text red">Support the author on&lt;/span> &lt;a href="https://www.patreon.com/1041uuu">Patreon&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/goldfish_bs4peq.gif" title="goldfish" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/goldfish_bs4peq.gif" alt="goldfish">
&lt;/a>
&lt;span class="caption">goldfish&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/goldfish.json">Right click to download goldfish.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.deviantart.com/kirokaze">kirokaze&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276937/Themes%20Display/solos_wmohu0.png" title="solos" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276937/Themes%20Display/solos_wmohu0.png" alt="solos">
&lt;/a>
&lt;span class="caption">solos&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/solos.json">Right click to download solos.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://unsplash.com/@usukbayer">usukbayer&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651279825/Themes%20Display/Sei_Stella_Daft_Punk_debugging_xvvpx6.gif" title="Sei&amp;amp;Stella(Daft Punk debugging)" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651279825/Themes%20Display/Sei_Stella_Daft_Punk_debugging_xvvpx6.gif" alt="Sei&amp;amp;Stella(Daft Punk debugging)">
&lt;/a>
&lt;span class="caption">Sei&amp;amp;Stella(Daft Punk debugging)&lt;/span>
&lt;/div>
&lt;p>Unknown Author. Unknown source.&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/Sei_Stella_jezhcv.gif" title="Sei&amp;amp;Stella" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/Sei_Stella_jezhcv.gif" alt="Sei&amp;amp;Stella">
&lt;/a>
&lt;span class="caption">Sei&amp;amp;Stella&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Sei&amp;amp;Stella.json">Right click to download Sei&amp;amp;Stella.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.deviantart.com/kirokaze">kirokaze&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/neonlight_iwpy3n.gif" title="neonlight" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/neonlight_iwpy3n.gif" alt="neonlight">
&lt;/a>
&lt;span class="caption">neonlight&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/neonlight.json">Right click to download neonlight.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.deviantart.com/minimoss/">minimoss&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276923/Themes%20Display/I_m_freezing_s38wvj.gif" title="I&amp;#39;m freezing!" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276923/Themes%20Display/I_m_freezing_s38wvj.gif" alt="I&amp;#39;m freezing!">
&lt;/a>
&lt;span class="caption">I&amp;#39;m freezing!&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/I'm%20freezing!.json">Right click to download I&amp;rsquo;m freezing!.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://1041uuu.tumblr.com">豊井祐太(Toyoi Yuuta)&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text red">Support the author on&lt;/span> &lt;a href="https://www.patreon.com/1041uuu">Patreon&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276926/Themes%20Display/Apatite_ocnys_hpbfjj.png" title="Apatite by ocnys" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276926/Themes%20Display/Apatite_ocnys_hpbfjj.png" alt="Apatite by ocnys">
&lt;/a>
&lt;span class="caption">Apatite by ocnys&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Apatite.json">Right click to download Apatite.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://unsplash.com/@usukbayer">Darío Méndez&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276926/Themes%20Display/Galaxy_Splash_Rieki_u1bywu.png" title="Galaxy Splash by Rieki" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276926/Themes%20Display/Galaxy_Splash_Rieki_u1bywu.png" alt="Galaxy Splash by Rieki">
&lt;/a>
&lt;span class="caption">Galaxy Splash by Rieki&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Galaxy%20Splash.json">Right click to download Galaxy Splash.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://unsplash.com/@jrkorpa">jrkorpa&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276918/Themes%20Display/Weekend_Mood_f2gfnj.gif" title="Weekend Mood" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276918/Themes%20Display/Weekend_Mood_f2gfnj.gif" alt="Weekend Mood">
&lt;/a>
&lt;span class="caption">Weekend Mood&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Weekend%20Mood.json">Right click to download Weekend Mood.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://jefflin276.wixsite.com/pixeljeff">Pixel Jeff&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276927/Themes%20Display/Divoom_Rieki_wevy9s.gif" title="Divoom by Rieki" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276927/Themes%20Display/Divoom_Rieki_wevy9s.gif" alt="Divoom by Rieki">
&lt;/a>
&lt;span class="caption">Divoom by Rieki&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Divoom.json">Right click to download Divoom.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://jefflin276.wixsite.com/pixeljeff">Pixel Jeff&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/%E6%94%BE%E8%AA%B2%E5%BE%8C_wverub.gif" title="放課後" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/%E6%94%BE%E8%AA%B2%E5%BE%8C_wverub.gif" alt="放課後">
&lt;/a>
&lt;span class="caption">放課後&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/%E6%94%BE%E8%AA%B2%E5%BE%8C.json">Right click to download 放課後.json&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/Holloween2020_b0cuuk.gif" title="Halloween 2020" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/Holloween2020_b0cuuk.gif" alt="Halloween 2020">
&lt;/a>
&lt;span class="caption">Halloween 2020&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/Halloween2020.json">Right click to download Halloween2020.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.instagram.com/debbiebalboa/">Debbie Balboa&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651291527/Themes%20Display/Electric_poles_Rieki_zuo8cz.gif" title="Electric poles by Rieki" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651291527/Themes%20Display/Electric_poles_Rieki_zuo8cz.gif" alt="Electric poles by Rieki">
&lt;/a>
&lt;span class="caption">Electric poles by Rieki&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/electric-poles.json">Right click to download electric-poles.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://mizukinoko4.tumblr.com/">水 キノコ&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/take_a_break_aqy2q7.gif" title="take a break" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276922/Themes%20Display/take_a_break_aqy2q7.gif" alt="take a break">
&lt;/a>
&lt;span class="caption">take a break&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/takeabreak.json">Right click to download takeabreak.json&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276008/Themes%20Display/sweet_dream_pl5zgf.gif" title="sweet dream" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276008/Themes%20Display/sweet_dream_pl5zgf.gif" alt="sweet dream">
&lt;/a>
&lt;span class="caption">sweet dream&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/sweetdream.json">Right click to download sweetdream.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://www.pixiv.net/en/users/4770244">nagi&lt;/a>&lt;/p>
&lt;p>…&lt;/p>
&lt;div class="figure center" >
&lt;a class="fancybox" href="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/cobaltkiss_first_theme_fpet2l.gif" title="cobaltkiss first theme / 显示屏" data-fancybox="themes">
&lt;img class="fig-img" src="https://res.cloudinary.com/suicablue/image/upload/v1651276920/Themes%20Display/cobaltkiss_first_theme_fpet2l.gif" alt="cobaltkiss first theme / 显示屏">
&lt;/a>
&lt;span class="caption">cobaltkiss first theme / 显示屏&lt;/span>
&lt;/div>
&lt;p>&lt;a href="https://cobaltkiss.blue/static/themes/cobaltkiss_first_theme.json">Right click to download cobaltkiss_first_theme.json&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text primary">Author:&lt;/span> &lt;a href="https://1041uuu.tumblr.com">豊井祐太(Toyoi Yuuta)&lt;/a>&lt;/p>
&lt;p>&lt;span class="highlight-text red">Support the author on&lt;/span> &lt;a href="https://www.patreon.com/1041uuu">Patreon&lt;/a>&lt;/p></description></item><item><title>I Want to Live Longer Than Her</title><link>https://suicablog.cobaltkiss.blue/posts/i-want-to-live-longer-than-her/</link><pubDate>Wed, 10 Mar 2021 10:03:32 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/i-want-to-live-longer-than-her/</guid><description>&lt;p>&lt;em>在那一瞬间我明白了，我果然还是想要活得长久，活得比 30 岁更长久。&lt;/em>&lt;/p>
&lt;p>昨天突然想起雅鲁藏布江女人，在我去年年末刚刚开始尝试 JK 制服时，嘟友向我推荐了这位博主的文章，文章里她讲述着自己对这些花花绿绿小裙子的喜爱，配图中她将格裙穿出不同韵味，色彩、材质的搭配令人心情愉快……我久违地到微博去看她，万万没想到映入我眼帘的最新微博是来自她朋友们的讣告：小雅在北京飞往上海的飞机上由于心脏骤停不幸离世。&lt;/p>
&lt;p>这条讯息发布自 2021 年 1 月 8 日，小雅在三天前的 5 号去世，在我知道这个消息时，小雅已经去世两个月了。&lt;/p>
&lt;p>看到的一瞬间，极大的不真实感、荒诞感包围了我。我对她的印象还停留在上次看她微博时视频中那个充满年轻朝气的女子、像个孩子般开心拆包裹的女性，如今她已不在人世，可是她在网络上留下的全是她最美好的模样。尽管我并未与她之间交流过，但我依旧感到难以置信，为什么人要在 27 岁痛苦的死在路途上，为什么这样美好的人只能活 30 年？接受这个现实后，我迅速关掉手机摘下耳机，强迫自己陷入睡眠。凌晨四点的夜晚寒冷黑暗，仿佛要把我吞噬。&lt;/p>
&lt;p>我在 Fedi 上不止一次看到认为自己活不过 30 岁的嘟友，有时，她们限定生命时限并在有限的每一天中沉浸在自己喜爱的事情中的姿态会让我感到些许羡慕。我也曾尝试将生命中的每一天当作人生的最后一天来过，但是屡遭失败。于是我坦然让自己活得慢慢吞吞、慢条斯理，但同时，我活得神经大条，常常犹如活在梦里，在现实中梦游，我为此付出了很多代价，这些代价令我焦灼不安，但是它们不至于严重影响我两年后的人生。我曾以为自己活得足够佛系了，我曾以为自己已经看透了自己的生命轨迹，我曾以为自己活的很慢——慢慢走自己的路。但是我依旧在每个夜里难以入睡，就像要弥补白天被荒芜的时光那样贪婪地消耗着我夜晚的生命，我在夜晚思考、总结我的人生，我在夜晚躲在被褥里忍笑，我在夜晚躲在被褥里哭泣，我在夜晚的时光中烦恼、发情，怀揣着无法释放的痛苦压抑自我、拷问自我，然后在白天浑浑噩噩醒来，日复一日。&lt;/p>
&lt;p>猝死，是个在网络上频繁出现的词，它往往和“年轻人”一同出现。我想象自己坐在飞机上，心脏突然变得难受起来，昏过去前，没有多少时间留给我去弥补遗憾，没有几分钟时间留给我将一直以来说不出口的话语转达给爱我的人们，只有痛苦、沉闷与不甘弥漫在胸膛之中。实际上也不需要很多想象，就在年初她去世后不久，我也需要乘飞机返回家乡，那天之前的夜晚我一宿没睡，原因是我如以往一样把收拾行李这件事一直往后拖到登机前一天的晚上，通宵收拾行李后直接坐车到机场，回家后大睡一天，这种行为对我来说并不陌生。但那天在前往机场的快车上，我出现了异常，现在想来有些后怕，为什么我没有在那时告诉司机呢，如果我真的就醒不过来了呢？&lt;/p>
&lt;p>那天我在飞机上留下了这样的记录：&lt;/p>
&lt;blockquote>
&lt;p>我坐下，车开动，空气变得闷热起来。为了让行李箱里多装几件衣服，我把最厚的几件衣服套在了自己身上，在外面时没什么感觉，然而在坐进车里、戴上口罩的时候，我感到自己呼出的气体带着呕吐味，咽下的唾沫像硫酸一样刺激着喉咙，胃被压迫着，仿佛我随时都可以吐在车里。我的脑袋晕晕乎乎的，起初我闭上眼睛，试图在短暂的行程中缓解自己的困意，然而不舒适感越来越强烈，身体上的难受唤起了这段时间生活上的各种不安，变为精神上的压迫一起折磨我。有那么一瞬间，我感觉自己如果就那么睡过去，我将再也无法醒来，&lt;/p>
&lt;/blockquote>
&lt;p>（稍后我会将整篇记录搬运到博客上）&lt;/p>
&lt;p>发生在自己身上的事情不足以引起我的关心，由他人转述的事情更不足以引起我的认真思考。在 Fedi 上，温和劝说我早些睡觉的人很多，印象最深的是我去年初建站时一位嘟友发来的私信，她以自己为例非常温柔地劝我好好睡觉，我一直将那封私信留在书签里，但是多次不走心的尝试后，我依旧一如既往地放任自己的恶习影响我的人生。或许是因为这次逝去的人曾在我心中代表着光明、积极、年轻、时尚，或许是因为她不同于任何一个我曾喜爱的因特定疾病死去的年轻生命——她毫无征兆地死去了，留在我心中的还是她美丽的模样，所以我很害怕，这次我干脆地丢掉了手机，连同那不甘于白天荒芜时光的执念一同丢弃了。&lt;/p>
&lt;p>我想要活得长久，想要活得比她更长久，所有热爱生命、珍视生活中的美好的人都值得长久的、更美好的人生。&lt;/p>
&lt;p>我无法像是明天就要死去般透支、穷尽效率地生活，无法在目前做到死去前心中毫无恐惧与遗憾，我只能为长久、无趣、沉重与失败的人生做好心理准备，我无法承受在年轻时死去的觉悟，几乎所有赞美死亡、赞美那黑暗的语句对我自己来说，其实不过是虚无的华美修辞。&lt;/p>
&lt;p>尽管我心中常常无规律不定期浮现出死亡念头，从 2019 年的夏天开始，这种念头每次出现都能令我陷入几天的抑郁情绪中，但我自己清楚它虽然常常出现，但每次它的出现都是短暂的，是可以通过将当下的导致我焦虑难过的因素排除后得到平复的。&lt;/p>
&lt;p>我又想到泰容哥（NCT）安慰直播中说着“想哭，人生好累”的人：&lt;/p>
&lt;blockquote>
&lt;p>“虽然人生很累……不对，人生并不辛苦。辛苦的事情总是会有的，如果本人一直觉得辛苦的话，那不是因为自身的问题而辛苦，那是因为境况而辛苦，是那个境况导致我感觉辛苦，所以怪罪境况也是可以的，不要责怪自身。辛苦的时候，回头看看，看一看周围，为了不忘记自身而努力着，一边回头看现在的情况，一边想着是从哪里开始出错的。”&lt;/p>
&lt;/blockquote>
&lt;p>既然根本没有赴死的觉悟，那就带着生活的觉悟好好活着、对自己负责地活着吧，若是再遇到几乎想让自己死掉的糟糕境况时，不要忘记今天我说过的话。我不把自己当作小孩，但是实际上我依旧幼稚，脑袋里充满不成熟的想法，我还有很多很多想做的事，还有很多很多想要去见的人，我做事常常缓慢、充满挫折，但是我一定会在或进或远的未来实现我的承诺，所以我要活得长久，我想见到 30 岁之后的自己，想要看着自己一点点老去，见证每个年纪的不同的自己，想要像 Jill（VA-11 HALL-A）一样祝福岁月中所有的自己。&lt;/p>
&lt;p>愿小雅在天堂安好，我们会永远记得相片中最美的你。&lt;/p></description></item><item><title>鸡杂味道的谈话</title><link>https://suicablog.cobaltkiss.blue/posts/a-friendly-talk-on-march-eighth/</link><pubDate>Mon, 08 Mar 2021 22:48:04 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/a-friendly-talk-on-march-eighth/</guid><description>&lt;p>标题是随便起的~
我现在正手忙脚乱地试图完成今天的 to-do list，但是我还是很想把今天白天的一场对谈中自己的想法记录下来。
类似于当时的那种轻松、解脱、醍醐灌顶的感觉，我也曾在与她的其他对谈中感受过，但我那时不曾记录，所以那种感悟也只会在我的记忆中留下模糊的印记。
于是这次，我打算尽可能简略快速地将我感受到启发的片段复刻下来。&lt;/p>
&lt;p>&amp;ldquo;她&amp;quot;是我的室友，我的朋友，我心中暗暗信任崇拜的人。我曾或多或少在各个账号中提到过这个“她”。她十分强大，野心勃勃，她活得快活，懂得玩乐，又愿意承担责任，自由且对自己认知清晰，却称自己是个悲观主义者。在她返校前，我或多或少对她的归来感到有点害怕，因为我知道自己目前的状况无法得到她的赞扬，而我十分渴望能够被如她那般强大而美好的人认同……但这些都无所谓了，因为在她回来后我感到很快乐，她也给寝室带来了活跃的气氛。今天中午我们两个在床上赖床到十一点，之后迅速洗漱穿着，两人简单画了眉毛、涂了口红便几乎素面朝天地出门搜罗东西吃。我们到处走来走去，最后在一家干锅店吃了鸡杂。&lt;/p>
&lt;p>我忘记了我们最初在谈什么，也忘记了我们的对话是如何慢慢转向了我与她的人生规划。在她询问起我的打算时我才意识到，她或多或少已经猜测到了我的处境。我们的谈话整个过程都很流畅自然，我也没有任何负担地说出了我的想法：我想要去哪个地方，我想要在哪个城市长久生活，接下来的我打算怎么做。面对她这个我心中的认可的对象，坦白我的状况并没有我想象的那般令我尴尬，相反，我不再认为她是会给我带来焦虑的对象。&lt;/p>
&lt;p>与朋友面对面的真诚交流或许比父母、心理导师带来的要多得多，若是这个朋友足够理智、强大、友善，我还能够从中感受到力量。当然，这并不代表我之后不需要去见心理咨询师，因为我有其他根本上的问题没有得到解决。但拥有这样的一个朋友已经是足够幸运、需要珍惜的事情了。&lt;/p>
&lt;p>我们谈到了父母的教育方式，我们吐槽我们各自爸妈僵硬的管教，这些管教让我们变得叛逆，即便他们说的是有几分道理的事情，我们也因这叛逆的心理对他们所言的内容感到排斥，于是我们刻意违抗。我们都想离开我们的家，想要拥有自己的房子，不同的是，我想要离开的是一个三线城市，一个被榨干的附属区域，而她想离开的却是无数人向往的天堂——我曾经对此感到困惑，如今我明白了她的想法。&lt;/p>
&lt;p>期间，我提到自己看到的一位站长的博文《你的人生可以失败》，我用自己的语言向她概括了作者想要表达的东西。&lt;/p>
&lt;p>“父母根据自己的人生经验试图阻止孩子犯错，孩子想要违抗父母强硬的言语；但是如果有一天，我为人父母，在看到我的孩子快要犯下和我年轻时相似的错误时，我是否会想要阻止孩子呢。答案是，我会的，因为我不愿看到孩子因受挫而被伤害。可是，&lt;strong>我的人生为什么不可以失败？我为什么就一定要成为一个成功者？&lt;/strong>”&lt;/p>
&lt;p>曾经我在看到这篇博文时感受到极大的宽慰。诚然，社会规则必然会造就无数失败者，做一个失败者并不可耻，但我依旧无法否认，这只是一种心灵宽慰，它无法解决我的焦虑，因为我对自己的现状、以及不改变现状的我可能的未来不甘心。我知道自己一直都不甘心，即便我一次次为自己的不甘感到痛苦，但我依旧一次次选择了承担这份痛苦，于是不断挣扎，一次次试图努力，一次次失败。&lt;/p>
&lt;p>所以在我看到她一边赞同地点头、一边非常想要说些什么的表情使，在听到她后面的话后，我感到有些惊讶，仿佛世界为我开启了一扇新窗。&lt;/p>
&lt;p>她告诉我她为何非常喜欢、崇敬她就职时的一位上司。有一次，她拿着自己的策划，这份策划中的内容，同司的多位前辈曾经尝试过，但是都得到了失败的结果，也就是说这份策划是一份极有可能面临失败的方案，但她的上司并没有阻止她。她的上司说，她需要思考前辈们处理这份方案失败的原因，若是她去做，她要思考她可能面临的新问题，比如不同的月份、不同的执行者、不同的行事沟通风格是否是成败的关键因素……涉及到她工作领域的东西我不太能消化，但是我明白她想表达的意思了：指出风险、提供思路、引导后人，这才是工作与生活中长辈能为后辈们做的事情，即便最终得到的结果依旧是失败，但是这个过程中我们得到了鼓励与支持，我们努力思考并消化前人的经验，我们为自己想要做的事情奋斗，我们充实了自己的人生，活出的也是自己的人生。&lt;/p>
&lt;p>能够遇到这样的上司是很幸运的，而我深知这份幸运是她凭借自己的力量争取来的。但就算人生中遇到的皆是平庸甚至糟糕的上司、父母、前辈，这种思考模式也可以为我提供新的思路，促使我去思考并行动，而非在如红酒般温润的心灵安慰中沉沦。&lt;/p>
&lt;p>要思考，要与别人交流沟通，要表达自己的观点，之后行动，并不断思考、思考、再思考，在思考与行动上为自己想做的事竭尽全力，即便在这件事情上我失败了，我的人生也没有失败。&lt;/p>
&lt;p>之后这个话题没有再继续，但我想能够时刻保持这样的心态的人是难以失败的。我一开始就说。她是个很有野心的人，同时，她有为自己拼搏的职场带来改革、良机的愿望，若她要做的是无数人不曾成功的事情，那么，当这件事成功时，它必然会带来改革性、颠覆性的成果。&lt;/p>
&lt;p>我并不热衷于事业，我热衷于我的心灵世界与我的生活，所以我知道，即便我很可能在一件又一件事情上面临失败的打击，这种“解决问题”而不是“宽慰情绪”的思路也会让我倍感鼓舞。&lt;/p>
&lt;p>整个谈话中我发现她对于这个国家、自己所在的行业、她自己都有独到而深刻的理解，之后通过询问得知她能够快速有效地阅读吸收多方资料，每天会有固定时段去广泛阅读，并且会有意识地用自己的话做总结（我也要努力培养这个习惯）。她说，人要有能力并主动从不同角度看待问题，要去了解这个世界，多读“书”，不仅限于纸质书本，而是利用这个时代提供给我们的信息去观察世界，了解世界，如果她只是单纯从父母那里接受知识，她一定会活得很狭隘。&lt;/p>
&lt;p>在 Fedi 的混乱而丰富、涵盖各种观点的嘟文冲刷下我也有相似感受。我磕磕绊绊花了半年左右的时间了解这个世界，试图形成完整的、清晰的自我。我成功了吗，我失败了吗？我不知道，但我想了解这个世界，我想了解复杂的、令我困惑的自我。这是我想要做的事，即便时而为此感到痛苦，但整体而言我依旧是为自己而活，我想我仍然享受这个过程。&lt;/p>
&lt;p>&lt;em>第一次尝试以博文的方式记录生活，读起来可能会有很多奇奇怪怪的地方，文笔粗糙，但是文笔需要通过多动笔（或者鼠标 XD）来培养——嘟友一次次向我强调这点。“希望今后文章可以越写越流畅易读！”请带着这样的希望继续写下去吧。&lt;/em>&lt;/p>
&lt;p>&lt;em>回顾文章时突然想到一段歌词，我想到吟唱着这首歌、望向窗外的修女（虽然很突然，但我想把这段联想也记录下来）：&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>Climb every mountain
Search high and low
Follow every by way
Every path you know
Climb every mountain
Ford every stream
Follow every rainbow
Till you find your dream
A dream that will need
All the love you can give
Everyday of your life
For as long as you live&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>Climb every mountain
Ford every stream
Follow every rainbow
Till you find your dream
A dream that will need
All the love you can give
Everyday of your life
For as long as you live&lt;/p>
&lt;blockquote>
&lt;/blockquote>
&lt;p>Climb every mountain
Ford every stream
Follow every rainbow
Till you find your dream&lt;/p>
&lt;/blockquote></description></item><item><title>在 Windows 上搭建 Hugo 博客之 Github 部署填坑记</title><link>https://suicablog.cobaltkiss.blue/posts/deploy-hugo-as-a-github-pages-project/</link><pubDate>Mon, 22 Feb 2021 03:37:09 +0800</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/deploy-hugo-as-a-github-pages-project/</guid><description>&lt;p>**笔记保留仅供个人复习，请不要参考这篇笔记搭建博客。写了新的思路更清晰的 Hugo 博客搭建与部署博文 → &lt;a href="https://suicablog.cobaltkiss.blue/posts/use-github-pages-to-create-your-own-blog-and-deploy-automatically/">利用 Github Pages 与 Github Action 搭建并部署 Hugo 博客&lt;/a> **&lt;/p>
&lt;h1 id="在-windows-上搭建-hugo-博客之-github-部署填坑记">在 Windows 上搭建 Hugo 博客之 Github 部署填坑记&lt;/h1>
&lt;p>这篇博文记录了本 CS 菜鸟搭建 Hugo 博客的崎岖过程，内容涵盖以下方面：&lt;/p>
&lt;ol>
&lt;li>Hugo 在 Windows 10 系统上的下载与安装（简略说明）&lt;/li>
&lt;li>Hugo 主题的下载、安装与配置（简略说明）&lt;/li>
&lt;li>将 Hugo 从本地部署到 Github 个人页面&lt;/li>
&lt;li>发布、修改、删除博文&lt;/li>
&lt;li>将 Github 默认的个人页面 URL 修改为自定义二级域名&lt;/li>
&lt;/ol>
&lt;div class="alert warning no-icon ">
&lt;p>正式阅读正文前您需要了解，本人在 CS 方面完完全全就是菜鸟一只。到底有多菜鸟呢？在 Hugo 的部署过程中需要大量 git 操作，而我是因为要建 Hugo 才开始学习 git 的基础操作。这篇博文算是我在自建 Hugo 博客过程中各路乱抄的作业答案整理归纳，抄作业过程中，我由于不明原理而抄错答案，导致博客运行出现了很多问题，这篇博文也对这些错误、错误原因和解决方式进行了总结。博文中可能难免出现描述性错误或可以进一步完善的地方，如有修改建议，希望您可以在下方评论指正，或通过 fediverse 账号、邮箱联系我修改。&lt;/p>
&lt;/div>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#在-windows-上搭建-hugo-博客之-github-部署填坑记">在 Windows 上搭建 Hugo 博客之 Github 部署填坑记&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#一hugo-在-windows-10-系统上的下载与安装">一、Hugo 在 Windows 10 系统上的下载与安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="#二hugo-主题的下载安装与配置">二、Hugo 主题的下载、安装与配置&lt;/a>&lt;/li>
&lt;li>&lt;a href="#三将-hugo-从本地部署到-github-个人页面">三、将 Hugo 从本地部署到 Github 个人页面&lt;/a>&lt;/li>
&lt;li>&lt;a href="#四发布修改删除博文">四、发布、修改、删除博文&lt;/a>&lt;/li>
&lt;li>&lt;a href="#五将-github-默认的个人页面-url-修改为自定义二级域名">五、将 Github 默认的个人页面 URL 修改为自定义二级域名&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="一hugo-在-windows-10-系统上的下载与安装">一、Hugo 在 Windows 10 系统上的下载与安装&lt;/h2>
&lt;p>Hugo 的官方网站上有 Hugo 在各种系统上安装的详细说明视频，对于熟悉 Window 10 系统操作的朋友来说并不困难，这里不再做复述和进一步说明，详情请看 &lt;a href="https://gohugo.io/getting-started/installing/">Hugo-Getting Started-Install Hugo&lt;/a> 。&lt;/p>
&lt;p>按照视频下载安装后，您的计算机中应该有一个名为&amp;quot;Hugo&amp;quot;的目录、一个名为&amp;quot;Sites&amp;quot;的用于存放所有博客站点的目录，Hugo 目录下应有三个文件；同时，您的计算中应已下载 Git 程序。&lt;/p>
&lt;h2 id="二hugo-主题的下载安装与配置">二、Hugo 主题的下载、安装与配置&lt;/h2>
&lt;p>这部分内容在网络上可以搜索到很多指南，我在操作过程中也遇到没什么问题，也不再进行详细说明。大致有这几个步骤：创建博客、下载安装主题、主题配置、本地测试，完成这部分操作后，您应该已经可以通过 &lt;a href="http://localhost:1313/">http://localhost:1313/&lt;/a> 查看您选择的主题成功安装在 Hugo 博客上的样子了。&lt;/p>
&lt;p>因为每个主题的配置文件、目录都略有不同，在主题配置过程中的具体操作请参考每个主题的说明文档。我的博客选用的主题是 &lt;a href="https://themes.gohugo.io/hugo-tranquilpeak-theme/">tranquilpeak&lt;/a> 。&lt;/p>
&lt;p>此时您的博客目录下应该有已经配置完毕的 config.toml 文件，themes 目录下存放着您已经安装完毕的主题。一般这个主题目录不做改动，除非您是主题设计者，对主体魔改有强烈的需求。tranquilpeak 主题目录中有一个名为&amp;quot;exampleSite&amp;quot;的目录，将目录下的所有目录与文件复制粘贴到博客根目录下并覆盖原有的目录、文件，通常主题应该都有类似 exampleSite 的目录，普通的主题调整一般只需在 config.toml 文件与 static 目录中进行。&lt;/p>
&lt;p>我建议您主题下载完成后在本地其他的目录再保存一份主题文档。在我自己搭建博客的过程中，混乱的窗口、git 操作失误导致我的博客目录混乱不堪，不得不将整个目录删除重建，通过 Hugo 下载主题，速度可能由于众所周知的网络原因而变得十分缓慢（尽管主题文件往往并不大）。（假如您不幸和我一样需要重建博客，）将备份的主题目录直接粘贴到博客目录下会大大减少您的博客搭建测试时间。&lt;/p>
&lt;h2 id="三将-hugo-从本地部署到-github-个人页面">三、将 Hugo 从本地部署到 Github 个人页面&lt;/h2>
&lt;p>这部分是我自己踩坑最多的地方，其实直到现在，我也没有完全弄清楚这一步怎么做是最好的或最适合自己的，所以在我把 git 基础教程看完并再去整理之前看过的各个教程后，这部分内容应该会再做修改更新。&lt;/p>
&lt;p>Hugo 部署到 Github 似乎有两种方式：&lt;/p>
&lt;ul>
&lt;li>创建两个 repository，一个存放 hugo 博客源文件，一个存放个人博客 public 中的文件&lt;/li>
&lt;li>创建一个 repository 和两个分支，分支分别存放源文件与 public 目录下的文件（也可创建一个分支，将 public 目录下文件存放进/doc）&lt;/li>
&lt;/ul>
&lt;p>但是大多数教程在这部分说得比较模糊，按照一般的教程，教程仅让你创建一个 gh-pages 的 repository（即&lt;user>.github.io，&lt;user>替换为 github 账户用户名）。这部分在网上也能找到很多教程，同样不过多阐释。目前我的博客也是在仅使用默认分支 master 与一个 repository 的情况下建立起来的，并没有上传源文件，这样大概是没办法使用 github actions（自动部署工具）的，不过目前并不影响我正常使用。&lt;/p>
&lt;p>特别提醒两点：&lt;/p>
&lt;p>第一，创建 repository 完毕后，请在您的 repository 页面上方找到 Settings，点击进入，在下方找到添加主题按钮为你的 github 页面添加一个主题，添加主题后，这个 repository 下会生成两个新文件：README.md 和_config.yml。&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
cd public
git add .
git commit -m &amp;quot;xxx(任意内容)&amp;quot;
git remote add origin https://github.com/&amp;lt;user&amp;gt;/&amp;lt;user&amp;gt;.github.io.git
# 这里如果 git 地址写错误上传，可执行 git remote remove origin
git pull origin master
# 这一步将 repository 上的两个文件拉到本地，如果今后远程 repository 中出现变动，需要这一步拉取远程数据，否则无法进行 git push
git push -u origin master
&lt;/code>&lt;/pre>&lt;p>（有一些教程中可能会提示您若 git push 后报错就用 &lt;code>git push -f origin master&lt;/code> 这个命令，-f 即 &amp;ndash;force ，是强制执行的意思，这个命令会强行删除远程 repository 中的文件后将本地文件 push 到远程，不建议使用；如果本地与远程不同步，请尽量使用 git pull 命令，或使用 &lt;code>git status&lt;/code> 寻找的具体问题。）&lt;/p>
&lt;p>为什么需要添加主题呢，如果缺少这一步，部署成功后打开你的博客页面可能会出现 css、js 文件加载失败的问题；除此之外，如果您有自定义域名并让博客域名由 http 转换为 https 的需求，这个_comfig.yml 文件是必须的。&lt;/p>
&lt;p>第二，执行上面的命令过程中可能会出现这个报错：
Git The requested URL returned error:403&lt;/p>
&lt;p>出现这个报错有三种可能：&lt;/p>
&lt;ol>
&lt;li>您没有权限&lt;/li>
&lt;li>您修改过 github 账户用户名与密码&lt;/li>
&lt;li>您曾在电脑上使用过其他 github 账户&lt;/li>
&lt;/ol>
&lt;p>我当时出现了两次这个报错，第一次是因为我曾在电脑上安装 hexo 博客，当时我使用的是另一个 github 账户，也就是第三种情况。这是您需要打开控制面板-&amp;gt;用户账户-&amp;gt;管理 Windows 凭据，向下看有普通凭据，找到关于 &lt;code>git: https://github.com&lt;/code> 并删除。 &lt;a href="https://www.cnblogs.com/wangxiaozhang/p/11303557.html">方法来自 WANGXIAOZHANG 的博文&lt;/a>&lt;/p>
&lt;p>第二次报错是因为我注册的新 github 账户没有在电脑上使用过，也就是第一种情况，这时您需要&lt;strong>生成 SSH 添加到 GitHub&lt;/strong>。&lt;/p>
&lt;pre tabindex="0">&lt;code>git config --global user.name &amp;lt;username&amp;gt;
git config --global user.email &amp;lt;useremail&amp;quot;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>根据您的 github 账户信息替换上面的内容，之后创建 SSH：&lt;/p>
&lt;p>&lt;code>ssh-keygen -t rsa -C &amp;lt;useremail&amp;gt;&lt;/code>&lt;/p>
&lt;p>之后输入：&lt;/p>
&lt;pre tabindex="0">&lt;code>cat ~/.ssh/id_rsa.pub
&lt;/code>&lt;/pre>&lt;p>将输出结果复制下来，请在您的 repository 页面上方找到 Settings，点击进入并在左边找到 SSH and GPG keys，创建 SSH keys，Title 处可随意填写，在 Key 处输入刚刚复制的结果，之后保存。&lt;/p>
&lt;p>在 git bash 输入：&lt;/p>
&lt;pre tabindex="0">&lt;code>ssh -T git@github.com
&lt;/code>&lt;/pre>&lt;p>输出了你的 github 用户名即代表 SSH 添加成功。
第一次在本地使用这个 github 账户可能跳出新窗口，按照指示输入 github 用户名、邮箱、密钥等信息即可，之后不会再出现这个窗口。&lt;/p>
&lt;p>到现在您可以刷新您的 github 页面，里面的内容应该已经更新为和本地的 public 目录下同样的状态，在 url 栏输入 &lt;user>.github.io 应就该会跳出您的博客页面啦~&lt;/p>
&lt;h2 id="四发布修改删除博文">四、发布、修改、删除博文&lt;/h2>
&lt;p>添加新博文，在根目录执行命令：&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo new post/标题.md
&lt;/code>&lt;/pre>&lt;p>或者直接将 markdown 文件拖到您主题对应的存放博文的目录下并添加修改前置数据。&lt;/p>
&lt;p>在此之前可以先在 archetypes 目录下添加编辑 post.md 文件，设置文章模板。这里要根据您安装的主题去编辑，在 tranquilpeak 主题中，博文默认储存在 content/post/中，默认博文样式文件名为 post.md，有些主题 content 下的目录可能为 posts，请在您安装的主题目录中的 content 与 archetypes 目录中找到正确的格式。&lt;/p>
&lt;p>对于 tranquilpeak 主题，可以这么设置 post.md:
(这部分内容来自 &lt;a href="https://saquarius.com/2019/07/hugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2windows10/#%E5%BB%BA%E7%AB%8Bgithub-pages%E5%B9%B6%E5%B0%86%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A">SAquarius 的梦想屋&lt;/a> )&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: &amp;quot;{{ replace .TranslationBaseName &amp;quot;-&amp;quot; &amp;quot; &amp;quot; | title }}&amp;quot;
date: {{ .Date }}
categories:
- category
- subcategory
tags:
- tag1
- tag2
keywords:
- tech
# 每次编辑文档时请删去这些解释的注释
# 缩略图，最好采用宽度为 750 的图片，可以使用本地文件或者使用 git 图床
# 使用本地图库，请把图片存在 themes/static/images 文件夹下，并且用下面的路径引用
thumbnailImage: /images/cover.jpg
# 缩略图位置，我觉得放在上面好看，如果用的小图片作缩略图
# 可以放在（left 或者 right），设置此项会取代配置文件中默认在下边的设置
thumbnailImagePosition: top
# 这个下边默认就好了，暂时不清楚有什么影响
autoThumbnailImage: yes
metaAlignment: center
# 封面图片，如果选用本地文件的话，和缩略图同样的路径，21：9 的图片效果很好看
coverImage: /images/cover.jpg
# 封面图片的描述引号中的文字可以自己选
coverCaption: &amp;quot;文章 cover 图片描述&amp;quot;
# in 表示文章标题显示在封面图片上，out 表示显示在封面图片的外边，也就是文章开头
coverMeta: in
# 封面图片的覆盖大小，直接默认为 full 吧，21:9 的图片这样设置显示效果真的不错
coverSize: full
---
#缩略显示的梗概，这里把注释删去，写成文章的简介或者梗概，在首页时候可以只显示梗概
&amp;lt;!--more--&amp;gt;
&amp;lt;!-- toc --&amp;gt;
&lt;/code>&lt;/pre>&lt;p>除此之外还可以添加：&lt;/p>
&lt;pre tabindex="0">&lt;code>slug: xxx
# 标题中含中文时可以利用 slug 简化 url，纯英文标题一般不需要。
# 比如标题&amp;quot;在 Debian 10 / Ubuntu 20.04 上安装 Pleroma（版本：2.2.1）&amp;quot;的默认 url 会很混乱
# 此时可以在 slug 后输入&amp;quot;Pleroma-Installation-on-Linux-using-OTP-releases&amp;quot;（注意冒号后的空格）
# 这篇博文的 url 就会变为&amp;quot;https://suicablog.cobaltkiss.blue/2020/09/pleroma-installation-on-linux-using-otp-releases/&amp;quot;
draft: false
#false 表示这篇博文不是草稿，push 后的博文将直接公开出现在播客主页上
# 若设置为 true，则代表这篇博文是草稿状态。
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>发布新博文/修改博文&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>hugo
cd public
git add .
git commit -m &amp;quot;new post added(或任意内容)&amp;quot;
git push -u origin master
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>删除博文&lt;/li>
&lt;/ul>
&lt;p>在尝试删除博文时，由于我之前不了解 git 基础操作，误删了连接本地与和远程 repository 的重要目录&amp;quot;.git&amp;quot;，之后便是不断地报错。前往不要直接将 public 删除，这回将里面的隐藏目录&amp;quot;.git&amp;quot;以及之前手动 pull 的两个文件一并删除（如果之后设置了自定义域名，CNAME 文件也会被删除），所以请在删除 public 中其他文件时保留：&lt;/p>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>.git 目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>README.md&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>_config.yml&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>CNAME&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以防万一可以给这几个文件目录做个本地备份）&lt;/p>
&lt;p>之后在根目录正常执行：&lt;/p>
&lt;pre tabindex="0">&lt;code>hugo
cd public
git add .
git commit -m &amp;quot;post deleted(或任意内容)&amp;quot;
git push -u origin master
&lt;/code>&lt;/pre>&lt;h2 id="五将-github-默认的个人页面-url-修改为自定义二级域名">五、将 Github 默认的个人页面 URL 修改为自定义二级域名&lt;/h2>
&lt;p>将博客 url 弄到二级域名上是个不错的选择，顶级域名则可用作其他用途。
首先您需要先有个自己的域名，关于买域名购买方式这里也不多阐释，国内的域名需要备案，非国内域名则无需备案；之后您需要为域名申请证书，常见的免费证书申请方案是 Let&amp;rsquo;s encrypt（三个月后失效，需手动重新申请或添加自动申请 certbot），或者您也可以将您的域名绑定到 cloudflare 上，申请免费的 15 年根域名与通配符域名证书。&lt;/p>
&lt;p>之后，您需要在您的域名购买商那边或者 CF 的 DNS 设置界面添加 A 记录，我的顶级域名已添加 A 记录到我的服务器 IP 用作其他用途，这里只需为二级域名添加一条新的 A 记录，指向下面四个域名中的任意一条：&lt;/p>
&lt;pre>&lt;code>185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&lt;/code>&lt;/pre>
&lt;p>详细步骤请参考这篇博文： &lt;a href="https://iseex.github.io/2018-08/custom-domain/">GitHub Pages 域名绑定及 https 支持的配置步骤&lt;/a>&lt;/p>
&lt;p>我在操作过程中，始终无法通过 github 强制我的博客 URL 支持 https 协议，最终我是通过在 CF 为耳机域名指定强制 https 页面规则达到 https 支持的。&lt;/p>
&lt;p>这样操作后会有个问题，强制导向 https 的博客页面有可能无法加载 CSS、JS 文件，这时您需要对之前我们手动添加的_config.yml 文件进行修改。
（您既可以在 github 上修改后 git pull，也可在本地修改后 git push）&lt;/p>
&lt;p>在文件中添加这么两行：&lt;/p>
&lt;pre>&lt;code>root: /xxx.github.io
url: https://custom.url
&lt;/code>&lt;/pre>
&lt;p>（把 xxx 和 custom.url 分别替换为 github 默认页面 url 以及自定义的 url）&lt;/p>
&lt;p>之后保存文件 git push 或 git pull 即可让博客页面加载 CSS、JS 文件。&lt;/p>
&lt;p>&lt;strong>到此为止一个个性化的 Hugo 博客就建好啦！&lt;/strong>&lt;/p></description></item><item><title>On the Airplane</title><link>https://suicablog.cobaltkiss.blue/posts/on-the-airplane/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/on-the-airplane/</guid><description>&lt;p>如果我很多很多天没有发新的动态，那往往并不代表我那段时间很忙；我是个精神昂扬时无法抑制自己表达欲的人，反之，当我没有表达欲时，就代表我处在一个低落的心情状态。&lt;/p>
&lt;p>今天是回家的日子，然而我并无实感。最近几天，我把自己的生活搞得一团糟，临走前匆匆收拾好两箱行李，在寝室挂好防潮袋，用旧报纸把书架罩住，把我堆在室友桌子椅子上的衣服收拾好塞进衣柜……把必须做的事急匆匆做完后已经凌晨三点了。这些事情或许是可以更早去做的，然后我就可以好好洗个热水澡，舒舒服服睡到早上六点半，穿好衣服提起行李优雅离开，但前几天乱七八糟的生活让我没有闲情逸致去处理这些，于是我一如既往地将所有事情拖到了最后一刻。&lt;/p>
&lt;p>因为距离出发没有多久时间，我害怕自己会彻底睡过去，于是干脆一宿没有睡觉。从寝室楼离开走到外面时，冰凉的空气令我感到舒适，甚至让我开始怀疑自己是不是不该回家，回去等待我的大概只有雾霾的气味。将大包小包扔进车里，我坐下，车开动，空气变得闷热起来。为了让行李箱里多装几件衣服，我把最厚的几件衣服套在了自己身上，在外面时没什么感觉，然而在坐进车里、戴上口罩的时候，我感到自己呼出的气体带着呕吐味，咽下的唾沫像硫酸一样刺激着喉咙，胃被压迫着，仿佛我随时都可以吐在车里。我的脑袋晕晕乎乎的，起初我闭上眼睛，试图在短暂的行程中缓解自己的困意，然而不舒适感越来越强烈，身体上的难受唤起了这段时间生活上的各种不安，变为精神上的压迫一起折磨我。有那么一瞬间，我感觉自己如果就那么睡过去，我将再也无法醒来，于是我睁开双眼，将身子坐直，侧眼将自己的注意力放在从窗边不断闪过的绿植上。 三十分钟十分难熬，当漫长而短暂而痛苦的旅程结束后，我爬下车，在机场室外站了将近十分钟，而后晃晃悠悠飘进了进站口，出票、托运、恍恍惚惚交了两百块托运费、安检、候机、坐上摆渡车。期间我走过一段长长的无人的走廊，从两侧的巨大玻璃窗可以看到停机坪与灰色的云和天空，玻璃窗前摆放着几条座椅，上面没人坐着，我在那一刻曾突然感到十分难过，寂寞冰冷的感觉环绕着我，我一刻也不愿停留。&lt;/p>
&lt;p>幸运的是我在摆渡车上有位置可以坐着，我抱着自己厚重的棉衣闭上眼睛休息，周遭慢慢变得嘈杂起来我想起开学时自己下飞机后站在摆渡车里，因为太久没有乘摆渡车我忘记了抓住扶手，于是车转弯的一瞬我摔在了陌生人的身上；这么想来，自己今天若是也站着，没准儿也会因为重心不稳而摔下去，有个位子坐着实令人开心。&lt;/p>
&lt;p>摆渡车上的人有两三人结伴的，有和我一样一人的，我突然想起自己很多年前在网易云音乐留下几行字，大概是说：我希望自己化作海里的一粒水珠，我希望自己变得渺小，渺小到任何人都无法注意到我，而我将融入大海冰冷而无尽的拥抱中；我希望自己死去的时候一个人坐在海边的礁石上，我将吹着海风，望着逐渐下沉的夕阳，随着天色暗去慢慢消失，而我遗留下的骨灰将被风儿吹进海浪。之后很多年我时不时会想起自己当时写下的这些文字，我一次次回忆自己那时的心情，我一遍遍询问自己，为什么要说这样的话，为什么要留下这样的文字，而我从未得知真正的答案，真正的答案被时间卷入了历史的尘埃。只是每次想到，包括今天想到时，都会觉得，这实在太过残酷，太过寂寞了。&lt;/p>
&lt;p>人根本无须许愿变得渺小，人本就渺小到接近虚无。越是成长，越是发现自己变得愈加飘渺没有形状，逐渐发现自己的手中令自己感到骄傲的已几乎所剩无几，生活在脱轨，我一次次拖拽着我的生活，让它变得尽可能令自己舒适、体面，然而我的人生在随着惯性不断倾斜，我尝试过与之对抗，一次次以失败告终，每一次失败，我都感到自己变得更加轻薄、更加渺小。我幻想自己变为西西弗斯，大地的重力令巨石落下，我令巨石从自己身上碾压而过、咕咚一声坠落在山脚，而我整个身体摊躺在半山腰，呆呆望着天上的星星月亮，遥远的地方神灵在怒吼：站直身体，抬起巨石，继续前行。&lt;/p>
&lt;p>飞机起飞时我以为自己会像在车上那样再“死一回”，但是，飞机在升入高空的一瞬间我没有任何感觉，我甚至以为自己的感觉麻痹了，也可能只是这次飞机上升地十分平稳。不到一分钟，飞机突破云层，窗外由灰暗变为刺眼的白茫茫的空白，忽然觉得自己刚刚的所有杂七杂八的念头被白光晃得消失不见，忧愁从何而来，生活的失衡因何而起，一瞬间搞不明白了，又觉得没必要去弄明白了。但我还是试着把不久前脑子里的念想写了下来，我不想回过头去看我写了什么，有没有什么错别字，我只知道现在它们都不重要了，至少现在，都无所谓了。剩下的一个小时我想休息，我想在见到迎接我的家人和猫时（至少表面上）充满精神，因为我不想让她们因担心而去多想。之后我会洗个热水澡，吹干头发，抱着我的猫咪补觉，当我再次醒来时，昨日的我早已随着快车车内沉闷的空气与呕吐物的刺鼻味以及那乱七八糟的生活一同死去。&lt;/p></description></item><item><title>在 Debian 10 / Ubuntu 20.04 上安装 Pleroma</title><link>https://suicablog.cobaltkiss.blue/posts/pleroma-installation-on-linux-using-otp-releases/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://suicablog.cobaltkiss.blue/posts/pleroma-installation-on-linux-using-otp-releases/</guid><description>&lt;h2 id="关于本文">关于本文&lt;/h2>
&lt;p>&lt;em>本文于 2022 年 4 月 30 日修改&lt;/em>&lt;/p>
&lt;p>&lt;strong>Pleroma 官方 OTP 方式安装教程：&lt;/strong> &lt;a href="https://docs-develop.pleroma.social/backend/installation/otp_en/">https://docs-develop.pleroma.social/backend/installation/otp_en/&lt;/a>&lt;/p>
&lt;p>&lt;em>按照这篇文章安装 Pleroma，理论上只需复制代码框里的内容到终端并根据说明进行适量调整即可完成安装并使用建好的实例，文章并不包括对操作原理的解释（&lt;del>因为作为一只技术菜鸟我也说不清楚&lt;/del>），也并不包含建站之后的实例管理操作内容。不过虽然顺利的话复制粘贴就完事了，但还是不要图快，每一行都仔细检查下有没有什么奇怪的提示或报错，遇到无法理解的问题可以用搜索引擎搜搜报错看看有没有解决方案，解决前一个报错再继续后面的步骤，尽量不要总是减少全盘重来……&lt;del>不过遇事不决直接重安装服务器也是个解决方法。（反正是全新的机子）&lt;/del>&lt;/em>&lt;/p>
&lt;p>以下内容以 Pleroma 官方 OTP 方式安装教程为基础，结合 &lt;a href="https://perch.vercel.app/2020/install-Pleroma/#%E6%B5%8B%E8%AF%95-Pleroma">如何在 Debian 10 上安装 Pleroma&lt;/a> 教程以及以 &lt;a href="https://i.nebula.moe/posts/2019-09-13-mastodon/">奈卜拉的 Mastodon 一键安装教程&lt;/a> 为基础的 &lt;a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/07/19/How-to-build-a-mastodon-instance.html">技术小白如何搭建 Mastodon 实例&lt;/a> 等多篇 Mastodon 安装教程，在实际操作过程中就可能遇到的细节问题方面对官方教程中的省略或模糊处理内容进行补充，域名、VPS 等前期准备过程已有多篇教程进行过详细说明，这里就简略带过并提供链接供您查看。&lt;/p>
&lt;p>本文并非严谨的教程，更多是我个人作为一个技术小白对自己的建站过程进行的整理和概括。如果您发现内容表述有误、随 Pleroma 版本更新需要进行更改的地方、用词不严谨以及必要的补充内容，又或对内容有疑问、在建站过程中遇到了问题，您可以在博客下方评论。&lt;/p>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="#关于本文">关于本文&lt;/a>&lt;/li>
&lt;li>&lt;a href="#安装前准备">安装前准备&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#购买-vps">购买 VPS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#购买域名">购买域名&lt;/a>&lt;/li>
&lt;li>&lt;a href="#可选接入-cloudflare">（可选）接入 Cloudflare&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ssh-远程登录">SSH 远程登录&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#正式安装">正式安装&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#一前置安装">一、前置安装&lt;/a>&lt;/li>
&lt;li>&lt;a href="#二安装-pleroma">二、安装 Pleroma&lt;/a>&lt;/li>
&lt;li>&lt;a href="#三设置-nginx-并获取-lets-encrypt-ssl-证书">三、设置 nginx 并获取 Let’s Encrypt SSL 证书&lt;/a>&lt;/li>
&lt;li>&lt;a href="#四设置系统服务">四、设置系统服务&lt;/a>&lt;/li>
&lt;li>&lt;a href="#五设置-lets-encrypt-证书的自动更新">五、设置 Let’s Encrypt 证书的自动更新&lt;/a>&lt;/li>
&lt;li>&lt;a href="#六创建第一个用户并设置为管理员">六、创建第一个用户并设置为管理员&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#一些可能对您有帮助的文章">一些可能对您有帮助的文章&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;h2 id="安装前准备">安装前准备&lt;/h2>
&lt;h3 id="购买-vps">购买 VPS&lt;/h3>
&lt;p>&lt;em>我之前写这篇文章时使用的 VPS 所在服务提供商是 Vultr ，随着 &lt;strong>Pleroma 对内存的需求增加&lt;/strong>，经友邻推荐将实例转移到了性价比更高的 Contabo ，不过听说这家有超售现象，友邻建议在购买时备注要 AMD 的机子。性能更好，另外 Contabo 相较 Vultr 对身份审核要更加严格。最初我使用的是 Vultr New York 3.5 美元/月的套餐，后更改为同一服务商 New Jersey 5 美元/月的套餐，最后又转入了 Contabo 最低价格套餐。&lt;/em>&lt;/p>
&lt;p>尽管 Pleroma 内存需求远低于 Mastodon 和 Misskey，但&lt;strong>购入 VPS 请最低保证 1 GB 的内存&lt;/strong>。这个配置对于用户较少的小型实例是足够的，再小实例就容易变得不稳定。如果预计会在未来接纳更多用户，请根据您需要购买更合适的套餐。&lt;/p>
&lt;p>Vultr 的最大优势是可以快速免费更换 IP 地址与在国内较容易支付，可使用快照免费快速备份（之前有 20 个免费快照位置可用，现已缩减至 1 个，添加需要付费），新注册有一定的优惠。&lt;/p>
&lt;p>&lt;em>我还尝试使用过 Mastodon 教程中常见的 DigitalOcean ，但出现了账号被冻结必须进行实名认证才可解封的情况，遂放弃，但是这家多年稳定经营的服务商依旧是很多站长的选择。&lt;/em>&lt;/p>
&lt;p>如果追求更低的价格，还有很多服务商可以选择，但要注意价格过低的服务往往存在各种问题，轻则因超售而导致售卖的产品性能低下、大陆网络无法访问、建站后续与个别实例无法互联，重则在没有通知的情况下直接封锁账号甚至删除全部数据，购买前请一定多去查查他人的评价，实在不放心就选择 Vultr、DigitalOcean 这样口碑较好的服务商。服务器选购以及 Vultr 具体操作可以参考 &lt;a href="https://guide.mastodon.im/68b0e4bb0b9e4fa5a9dd74d03b71a328">o3o.ca 站长的教程&lt;/a> 。&lt;/p>
&lt;p>&lt;strong>建立 Fediverse 实例请不要使用位于国内服务器与国内的服务器提供商。&lt;/strong>&lt;/p>
&lt;p>我撰写本文时使用的操作系统为 Debian 10，之前也曾使用 Ubuntu 20.04，二者差别较小。如需使用其他操作系统，请在 &lt;a href="https://docs-develop.pleroma.social/backend/">官方教程&lt;/a> 中根据自己的系统选择相应教程。&lt;/p>
&lt;h3 id="购买域名">购买域名&lt;/h3>
&lt;p>&lt;em>初建站时我在 Namecheap 购买域名，之后转移到了 Porkbun 。&lt;/em> 域名购买与 DNS 设置步骤大致都是相似的，按照网站指引一步步操作即可 。域名往往第一年的价格低廉，续费价格恢复为正常价格。域名一旦选定并用于建站，后期更改会比较繁琐且容易出现各种问题，请谨慎思考想要的域名。请不要使用国内的域名注册商与位于国内的域名，详情请参考 &lt;a href="https://blog.bgme.me/posts/precautions-for-registering-domains/">影子屋的博文&lt;/a> 。&lt;/p>
&lt;p>Namecheap 的购买与验证操作请参考 &lt;a href="https://pullopen.github.io/%E5%9F%BA%E7%A1%80%E6%90%AD%E5%BB%BA/2020/07/19/How-to-build-a-mastodon-instance.html#1-%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D">技术小白如何搭建 Mastodon 实例中的前三部分&lt;/a> 。&lt;/p>
&lt;p>我使用 Namecheap 早期曾因 IP 问题致使账号被暂时封锁，如果出现这种情况，请按照 Namecheap 的说明进行操作，一般为在指定网站实时拍摄盖住姓名地址的信用卡背面照片。如果想避免这种情况出现，请不要在使用 Namecheap 网站的过程中频繁更换 VPN 节点。&lt;/p>
&lt;p>购买域名后，在域名管理器（Advanced DNS Setting - HOST RECORDS）中添加一个 A Record，Host 一般填写 @ ，Value 填写您服务器的 IP 地址，点击确定，DNS Setting 中除自定义设置外的 Namecheap 自动生成内容需要全部删除。&lt;/p>
&lt;p>如果使用 Cloudflare 服务，添加 A record 这个步骤可以直接在 Cloudflare 中进行。&lt;/p>
&lt;h3 id="可选接入-cloudflare">（可选）接入 Cloudflare&lt;/h3>
&lt;p>Cloudflare 可以为实例提供很大程度上的安全防护并提升网站访问速度（&lt;del>不过有时它也会降低网站访问速度，人称降速器&lt;/del>），先前 Cloudflare 曾遭到攻击，使用 Cloudflare 服务的实例几乎全军覆没，短暂出现了大陆网络无法访问的情况。不过 Cloudflare 依旧有能力保护网站顶住大部分网络攻击，若预算有限、技术有限且人没有更好的免费 CDN 方案，还是建议接入的。&lt;/p>
&lt;p>网络上有许多 Cloudflare 设置教程，也可参考 &lt;a href="https://guide.mastodon.im/cloudflare">o3o.ca 站长这篇教程&lt;/a> 进行配置，并在 DNS 板块仿照之前的说明添加 A Record 。&lt;/p>
&lt;p>接入 Cloudflare 后，域名相关的操作可直接在 Cloudflare 进行而无需在之前的网站登录。&lt;/p>
&lt;h3 id="ssh-远程登录">SSH 远程登录&lt;/h3>
&lt;p>Vultr 网页上的控制台不适合日常管理使用，速度极慢且使用并不稳定，它主要用于在您在本地计算机远程 SSH 登录出现问题时用于修复操作错误。我在建站时根据 &lt;a href="https://malaxiaolongmao.github.io/%E5%B7%A5%E5%85%B7/2020/07/17/mastodon-instance-1/">麻辣小龙猫的教程&lt;/a> 建议选择了 Bitvise SSH Client 这个工具，方便 Windows 用户进行实例远程操作，它提供的 SFTP 窗口对于草履虫在后续的实例管理中非常有用。下载并安装后，在 Host 一栏输入刚刚购买 VPS 的 IP 地址，Port 端口输入 22，点击登录，点击 “New Terminal Console” 即可使用 root 账户进行后续终端操作。&lt;/p>
&lt;p>建议先修改 root 帐户密码，防止原默认密码丢失：&lt;/p>
&lt;pre tabindex="0">&lt;code>passwd &amp;lt;您要修改的密码&amp;gt;
&lt;/code>&lt;/pre>&lt;p>密码是不显示的，输入密码后直接按回车，再次输入确认即可。&lt;/p>
&lt;h2 id="正式安装">正式安装&lt;/h2>
&lt;p>本文指令未特别提示的情况下全部使用 root 用户进行。&lt;/p>
&lt;h3 id="一前置安装">一、前置安装&lt;/h3>
&lt;p>1、安装依赖&lt;/p>
&lt;pre tabindex="0">&lt;code>apt install curl unzip libncurses5 postgresql postgresql-contrib nginx certbot libmagic-dev
&lt;/code>&lt;/pre>&lt;p>如果安装途中出现错误，则执行以下命令后再次尝试安装：&lt;/p>
&lt;pre tabindex="0">&lt;code>apt-get update
&lt;/code>&lt;/pre>&lt;p>2、安装可选安装包（建议全部安装）&lt;/p>
&lt;pre tabindex="0">&lt;code>apt install imagemagick ffmpeg libimage-exiftool-perl
&lt;/code>&lt;/pre>&lt;p>3、Postgresql 性能调优（可选）&lt;/p>
&lt;p>为了优化性能，您可以使用 &lt;a href="https://pgtune.leopard.in.ua/#/">pgTune&lt;/a> (pgTune 中 Number of Connections 处根据官方文档建议填写 20 ，但您并不需要更改 conf 文件上这一处的默认配置) 生成推荐配置，并根据推荐配置调整 /etc/postgresql/11/main/postgresql.conf 中的相应数值:&lt;/p>
&lt;pre tabindex="0">&lt;code>nano /etc/postgresql/11/main/postgresql.conf
&lt;/code>&lt;/pre>&lt;p>使用以下命令重启 PostgreSQL:&lt;/p>
&lt;pre tabindex="0">&lt;code>systemctl restart postgresql
&lt;/code>&lt;/pre>&lt;p>（11 为我系统 Postgresql 的版本，您的版本不同的话会显示为其他序号）&lt;/p>
&lt;h3 id="二安装-pleroma">二、安装 Pleroma&lt;/h3>
&lt;p>1、创建一个 Pleroma 用户&lt;/p>
&lt;pre tabindex="0">&lt;code>adduser --system --shell /bin/false --home /opt/pleroma pleroma
&lt;/code>&lt;/pre>&lt;p>2、检测并设置环境变量 FLAVOUR&lt;/p>
&lt;pre tabindex="0">&lt;code>arch=&amp;quot;$(uname -m)&amp;quot;;if [ &amp;quot;$arch&amp;quot; = &amp;quot;x86_64&amp;quot; ];then arch=&amp;quot;amd64&amp;quot;;elif [ &amp;quot;$arch&amp;quot; = &amp;quot;armv7l&amp;quot; ];then arch=&amp;quot;arm&amp;quot;;elif [ &amp;quot;$arch&amp;quot; = &amp;quot;aarch64&amp;quot; ];then arch=&amp;quot;arm64&amp;quot;;else echo &amp;quot;Unsupported arch: $arch&amp;quot;&amp;gt;&amp;amp;2;fi;if getconf GNU_LIBC_VERSION&amp;gt;/dev/null;then libc_postfix=&amp;quot;&amp;quot;;elif [ &amp;quot;$(ldd 2&amp;gt;&amp;amp;1|head -c 9)&amp;quot; = &amp;quot;musl libc&amp;quot; ];then libc_postfix=&amp;quot;-musl&amp;quot;;elif [ &amp;quot;$(find /lib/libc.musl*|wc -l)&amp;quot; ];then libc_postfix=&amp;quot;-musl&amp;quot;;else echo &amp;quot;Unsupported libc&amp;quot;&amp;gt;&amp;amp;2;fi;echo &amp;quot;$arch$libc_postfix&amp;quot;
&lt;/code>&lt;/pre>&lt;p>假设输出结果是 &amp;ldquo;amd64&amp;rdquo;（请替换为您自己的输出结果），输入 ：&lt;/p>
&lt;pre tabindex="0">&lt;code>export FLAVOUR=&amp;quot;amd64&amp;quot;
&lt;/code>&lt;/pre>&lt;p>3、下载安装 Pleroma 所需的文件到 /tmp 文件夹并解压&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;
curl 'https://git.pleroma.social/api/v4/projects/2/jobs/artifacts/stable/download?job=$FLAVOUR' -o /tmp/pleroma.zip
unzip /tmp/pleroma.zip -d /tmp/
&amp;quot;
&lt;/code>&lt;/pre>&lt;p>4、移动文件到 /opt/pleroma 并删除临时文件夹&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;
mv /tmp/release/* /opt/pleroma
rmdir /tmp/release
rm /tmp/pleroma.zip
&amp;quot;
&lt;/code>&lt;/pre>&lt;p>5、创建 /uploads 文件夹并设置适当的权限&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir -p /var/lib/pleroma/uploads
chown -R pleroma /var/lib/pleroma
&lt;/code>&lt;/pre>&lt;p>6、创建 static 文件（用于存放表情等文件）并设置其所有者为用户 pleroma&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir -p /var/lib/pleroma/static
chown -R pleroma /var/lib/pleroma
&lt;/code>&lt;/pre>&lt;p>7、创建存放配置文件的文件夹并设置其所有者为用户 pleorma&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir -p /etc/pleroma
chown -R pleroma /etc/pleroma
&lt;/code>&lt;/pre>&lt;p>8、生成 config 配置文件&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;./bin/pleroma_ctl instance gen --output /etc/pleroma/config.exs --output-psql /tmp/setup_db.psql&amp;quot;
&lt;/code>&lt;/pre>&lt;p>9、若 config 文件生成成功，则出现若干问题需要回答：&lt;/p>
&lt;p>What domain will your instance use? (e.g pleroma.soykaf.com) []
您的网站将使用什么网址？&lt;/p>
&lt;p>What is the name of your instance? (e.g. Pleroma/Soykaf) []
您的网站叫什么名字？&lt;/p>
&lt;p>What is your admin email address? []
网站管理员的邮箱地址是什么？&lt;/p>
&lt;p>What email address do you want to use for sending email notifications?
[]
您想要用什么邮件地址来发送邮件通知？（这里先输入邮箱，之后若要向用户发送邮件需要额外配置）&lt;/p>
&lt;p>Do you want search engines to index your site? (y/n) [n]
您希望搜索引擎收录您的网站吗？（建议不收录）&lt;/p>
&lt;p>Do you want to store the configuration in the database (allows controlling it from admin-fe)? (y/n) [n] y
您希望将配置信息存入数据库吗（允许从管理后台进行控制）？（建议存入，否则 admin-fe 将无法使用）&lt;/p>
&lt;p>Do you want to strip location (GPS) data from uploaded images? (y/n) [y] n
您希望从上传的图片中消除 GPS 信息吗？（建议消除）&lt;/p>
&lt;p>Do you want to anonymize the filenames of uploads? (y/n) [n] y
您希望将上传文件的文件名匿名化吗？（建议匿名化）&lt;/p>
&lt;p>Do you want to deduplicate uploaded files? (y/n) [n] y
您希望去除重复的已上传文件吗？（建议去除）&lt;/p>
&lt;p>除以上问题外，其余选项均按 enter 选择默认配置即可&lt;/p>
&lt;p>如果成功则有如下显示：&lt;/p>
&lt;p>All files successfully written! Refer to the installation instructions for your platform for next steps. Please transfer your config to the database after running database migrations. Refer to &amp;ldquo;Transfering the config to/from the database&amp;rdquo; section of the docs for more information.&lt;/p>
&lt;p>10、创建 postgres 数据库&lt;/p>
&lt;pre tabindex="0">&lt;code>su postgres -s $SHELL -lc &amp;quot;psql -f /tmp/setup_db.psql&amp;quot;
&lt;/code>&lt;/pre>&lt;p>11、更新数据库 schema&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;./bin/pleroma_ctl migrate&amp;quot;
&lt;/code>&lt;/pre>&lt;p>12、启动实例以验证一切都按预期工作&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;./bin/pleroma daemon&amp;quot;
&lt;/code>&lt;/pre>&lt;p>13、等待大约 60 秒并检测实例运行状况，如果它正确地显示了您的网址、网站名称和电子邮件地址，则说明实例已经安装成功 &lt;span class="highlight-text yellow">（update: 经建议，由 20 秒延长为 60 秒）&lt;/span>&lt;/p>
&lt;pre tabindex="0">&lt;code>sleep 60 &amp;amp;&amp;amp; curl http://localhost:4000/api/v1/instance
&lt;/code>&lt;/pre>&lt;p>注：如果出现错误 &amp;ldquo;curl: (7) Failed to connect to localhost port 4000: Connection refused&amp;rdquo; ，请等待一会儿再此尝试，错误可能是 Pleroma 初次加载时间较慢导致的。&lt;/p>
&lt;p>14、最后，暂时先暂停实例的运行&lt;/p>
&lt;pre tabindex="0">&lt;code>su pleroma -s $SHELL -lc &amp;quot;./bin/pleroma stop&amp;quot;
&lt;/code>&lt;/pre>&lt;h3 id="三设置-nginx-并获取-lets-encrypt-ssl-证书">三、设置 nginx 并获取 Let’s Encrypt SSL 证书&lt;/h3>
&lt;p>1、获取一个 Let’s Encrypt 证书（注意修改域名）&lt;/p>
&lt;pre tabindex="0">&lt;code>certbot certonly --standalone --preferred-challenges http -d &amp;lt;yourinstance.tld&amp;gt;
&lt;/code>&lt;/pre>&lt;p>2、输入您的邮箱地址（用于紧急重建和安全通知）并按照指示选择 A（agree）和 Y(yes)&lt;/p>
&lt;p>&lt;em>之前 Let’s Encrypt 曾撤销了一批有问题的证书，撤销前曾通过邮件进行通知，请务必留下一个有效的联系邮件。&lt;/em>*&lt;/p>
&lt;p>3、显示以下结果证明证书获取成功（否则尝试再次执行第一个指令）：&lt;/p>
&lt;p>Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/&amp;lt;实例域名&amp;gt;/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/&amp;lt;实例域名&amp;gt;/privkey.pem Your cert will expire on &amp;lt;到期日期&amp;gt;. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew &lt;em>all&lt;/em> of your certificates, run &amp;ldquo;certbot renew&amp;rdquo;……（省略）&lt;/p>
&lt;p>注：如果提示与我上面写的不同，请仔细检查证书有没有成功申请并存放到&amp;quot;/etc/letsencrypt/live/实例域名/&amp;quot;，若没有申请成功，后面依旧会卡住。&lt;/p>
&lt;p>一般这一步出错有两种可能，第一，您没有添加 A 记录，请到域名注册网站添加或修改 A 记录；二，80 和 443 端口未开放，如果这里出现错误&amp;quot;Problem binding to port 80: Could not bind to IPv4 or IPv6.&amp;quot;，请检查防火墙端口开放情况（&lt;span class="highlight-text red">补充： Debian 需要额外安装 ufw&lt;/span>）：&lt;code>sudo ufw status verbose&lt;/code>，如果只有 22 端口开放，请通过 &lt;code>sudo ufw allow 80/tcp&lt;/code>、&lt;code>sudo ufw allow 443/tcp&lt;/code> 将 80 和 443 端口开放。(*备注)&lt;/p>
&lt;p>操作完成后，再次输入指令，直到看到正确的成功提示。&lt;/p>
&lt;p>4、复制 Pleroma nginx 配置到 nginx 文件夹&lt;/p>
&lt;pre tabindex="0">&lt;code>cp /opt/pleroma/installation/pleroma.nginx /etc/nginx/sites-available/pleroma.conf
ln -s /etc/nginx/sites-available/pleroma.conf /etc/nginx/sites-enabled/pleroma.conf
&lt;/code>&lt;/pre>&lt;p>5、使用 nano 编辑器打开 Nginx 配置文件&lt;/p>
&lt;pre tabindex="0">&lt;code>nano /etc/nginx/sites-available/pleroma.conf
&lt;/code>&lt;/pre>&lt;p>6、将文件中所有 example.tld 更改为您的实例的对应名称（操控方向键滑动页面，用 backspace 删除默认名称，并输入新的地址即可）&lt;/p>
&lt;p>&lt;em>注（未经验证）&lt;/em>：location 处只保留后面的&lt;code>$&lt;/code>符号，删除前面的&lt;code>$&lt;/code>符号）：&lt;/p>
&lt;pre>&lt;code>location / {
return 301 https://&amp;lt;您的实例名&amp;gt;$request_uri;
}
&lt;/code>&lt;/pre>
&lt;p>7、修改完毕后按 ctrl X，选择 Y（yes）保存，然后按 enter 退出&lt;/p>
&lt;p>8、确认 nginx 是否配置正确&lt;/p>
&lt;pre tabindex="0">&lt;code>nginx -t
&lt;/code>&lt;/pre>&lt;p>出现以下内容则配置成功：&lt;/p>
&lt;p>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful&lt;/p>
&lt;p>9、启动 nginx（若先前 nginx 已在运行则 reload &lt;code>nginx -s reload&lt;/code>）&lt;/p>
&lt;pre tabindex="0">&lt;code>systemctl start nginx
&lt;/code>&lt;/pre>&lt;h3 id="四设置系统服务">四、设置系统服务&lt;/h3>
&lt;p>1、将 pleroma.service 复制到适当的文件夹中&lt;/p>
&lt;pre tabindex="0">&lt;code>cp /opt/pleroma/installation/pleroma.service /etc/systemd/system/pleroma.service
&lt;/code>&lt;/pre>&lt;p>2、启动 pleroma 并设置开机自启动&lt;/p>
&lt;pre tabindex="0">&lt;code>systemctl start pleroma
systemctl enable pleroma
&lt;/code>&lt;/pre>&lt;p>在地址栏输入您的实例域名，若 pleroma 服务启动成功，则应显示 pleroma 页面；若显示 502 bad gateway，再次执行 systemctl start pleroma ，之后刷新页面&lt;/p>
&lt;h3 id="五设置-lets-encrypt-证书的自动更新">五、设置 Let’s Encrypt 证书的自动更新&lt;/h3>
&lt;p>&lt;em>这部分内容可以参考&lt;/em> → &lt;a href="https://suicablog.cobaltkiss.blue/posts/wildcard-with-cloudflare-using-certbot/">通配符域名证书申请与自动更新&lt;/a>&lt;/p>
&lt;p>1、创建路径&lt;/p>
&lt;pre tabindex="0">&lt;code>mkdir -p /var/lib/letsencrypt
&lt;/code>&lt;/pre>&lt;p>2、使用 nano 编辑器打开 Nginx 配置文件&lt;/p>
&lt;pre tabindex="0">&lt;code>nano /etc/nginx/sites-available/pleroma.conf
&lt;/code>&lt;/pre>&lt;p>3、去除
location ~ /.well-known/acme-challenge { root /var/lib/letsencrypt/; }
前的 # 注释符号&lt;/p>
&lt;p>内容全部显示为白色后按 ctrl X，选择 Y（yes）保存，然后按 enter 退出&lt;/p>
&lt;p>4、确认配置是否正确&lt;/p>
&lt;pre tabindex="0">&lt;code>nginx -t
&lt;/code>&lt;/pre>&lt;p>5、重启 nginx&lt;/p>
&lt;pre tabindex="0">&lt;code>systemctl restart nginx
&lt;/code>&lt;/pre>&lt;p>6、确认自动更新任务设置成功（注意修改域名）&lt;/p>
&lt;pre tabindex="0">&lt;code>certbot renew --cert-name &amp;lt;yourinstance.tld&amp;gt; --webroot -w /var/lib/letsencrypt/ --dry-run --post-hook 'systemctl reload nginx'
&lt;/code>&lt;/pre>&lt;p>显示以下内容则设置成功：
Congratulations, all renewals succeeded. The following certs have been renewed: /etc/letsencrypt/live/yourinstance.tld/fullchain.pem (success)
** DRY RUN: simulating &amp;lsquo;certbot renew&amp;rsquo; close to cert expiry
** (The test certificates above have not been saved.)&lt;/p>
&lt;p>7、添加自动任务（注意修改域名）&lt;/p>
&lt;pre tabindex="0">&lt;code>echo '#!/bin/sh
certbot renew --cert-name &amp;lt;yourinstance.tld&amp;gt; --webroot -w /var/lib/letsencrypt/ --post-hook &amp;quot;systemctl reload nginx&amp;quot;
' &amp;gt; /etc/cron.daily/renew-pleroma-cert
chmod +x /etc/cron.daily/renew-pleroma-cert
&lt;/code>&lt;/pre>&lt;p>8、确认任务添加成功&lt;/p>
&lt;pre tabindex="0">&lt;code>run-parts --test /etc/cron.daily
&lt;/code>&lt;/pre>&lt;p>若显示内容中包含 /etc/cron.daily/renew-pleroma-cert 则添加成功&lt;/p>
&lt;h3 id="六创建第一个用户并设置为管理员">六、创建第一个用户并设置为管理员&lt;/h3>
&lt;p>&lt;code>&amp;lt;joeuser&amp;gt;&lt;/code> 处为管理员 ID，后面为管理员邮箱地址，根据自己情况设置&lt;/p>
&lt;pre tabindex="0">&lt;code>cd /opt/pleroma/bin
su pleroma -s $SHELL -lc &amp;quot;./bin/pleroma_ctl user new &amp;lt;joeuser&amp;gt; &amp;lt;joeuser@sld.tld&amp;gt; --admin&amp;quot;
&lt;/code>&lt;/pre>&lt;p>选择 [y] 后终端会出现一个链接，复制链接并粘贴到浏览器打开，为管理员账号设置密码，设置完毕即可进入实例页面。&lt;/p>
&lt;h2 id="一些可能对您有帮助的文章">一些可能对您有帮助的文章&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://wiki.iroiro.party/doku.php?id=start&amp;amp;do=index">形形色色 - 各种的建站教程以及一些建站所需要的基本知识&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kyo.iroiro.party/posts/pleroma-building/">尽量细致的Pleroma搭建教程（仮）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mindpalace.michaelis.website/tech/fedi-intro-trans.html">一份友好的联邦宇宙介绍&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dasgelobteland.github.io/posts/22pleroma/">我的pleroma搭建笔记&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>